
ili9341.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001c6e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800100  00800100  00001c6e  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a4f  00000000  00000000  00001de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bff  00000000  00000000  00005838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000112d  00000000  00000000  00006437  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000384  00000000  00000000  00007564  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002de  00000000  00000000  000078e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fd6  00000000  00000000  00007bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00009b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00001b94  00001b94  00001c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.backuplocationvset 00000022  00001a50  00001a50  00001b04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.backuplocationvactual 00000022  00001a72  00001a72  00001b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.backuplocationiset 00000022  00001a94  00001a94  00001b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.backuplocationiactual 00000022  00001ab6  00001ab6  00001b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ili9341_drawchar 000001a0  000012b2  000012b2  00001366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.ili9341_setcursor 00000012  00001b3e  00001b3e  00001bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.ili9341_settextcolour 00000012  00001b50  00001b50  00001c04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.ili9341_settextsize 00000010  00001b74  00001b74  00001c28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.ili9341_write 00000098  00001672  00001672  00001726  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.ili9341_putchar_printf 00000006  00001b8e  00001b8e  00001c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .progmemx.data 00000040  000005c3  000005c3  00000677  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.display_init 000003d0  00000a4c  00000a4c  00000b00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .progmemx.data.font 000004fb  000000c8  000000c8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 27 .data.mydata  0000000f  0080011f  00001b98  00001c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .text.ili9341_hard_init 00000012  00001b62  00001b62  00001c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.ili9341_spi_init 00000018  00001b12  00001b12  00001bc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.ili9341_spi_send 0000000a  00001b84  00001b84  00001c38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.ili9341_writecommand8 0000001a  00001af8  00001af8  00001bac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.ili9341_writedata8 00000020  00001ad8  00001ad8  00001b8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.ili9341_setaddress 0000006e  00001888  00001888  0000193c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.ili9341_hard_reset 0000004a  000018f6  000018f6  000019aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.ili9341_init 00000224  0000108e  0000108e  00001142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.ili9341_pushcolour 00000014  00001b2a  00001b2a  00001bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.ili9341_clear 00000076  00001812  00001812  000018c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.ili9341_drawpixel 0000003e  00001940  00001940  000019f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.ili9341_fillrect 000000c4  00001452  00001452  00001506  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.ili9341_setRotation 000000a0  000015d2  000015d2  00001686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .data.LCD_H   00000002  0080013d  00001bb6  00001c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 42 .data.LCD_W   00000002  0080013f  00001bb8  00001c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 43 .text.main    00000272  00000e1c  00000e1c  00000ed0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .data.mydata  0000000f  0080012e  00001ba7  00001c5b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 45 .text.avrlibc 0000002e  00001a22  00001a22  00001ad6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.avrlibc 00000090  0000170a  0000170a  000017be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.avrlibc 00000448  00000604  00000604  000006b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.avrlibc 00000036  000019b6  000019b6  00001a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.avrlibc 00000078  0000179a  0000179a  0000184e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.avrlibc 000000bc  00001516  00001516  000015ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.libgcc.prologue 00000038  0000197e  0000197e  00001a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.libgcc.prologue 00000036  000019ec  000019ec  00001aa0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
   8:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
   c:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  10:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  14:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  18:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  1c:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  20:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  24:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  28:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  2c:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  30:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  34:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  38:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  3c:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  40:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  44:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  48:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  4c:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  50:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  54:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  58:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  5c:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  60:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>
  64:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 1f       	adc	r16, r17
  6c:	80 01       	movw	r16, r0
  6e:	1f 01       	movw	r2, r30
  70:	41 00       	.word	0x0041	; ????
  72:	1b 98       	cbi	0x03, 3	; 3

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 0e 07 	call	0xe1c	; 0xe1c <main>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00001b94 <__bad_interrupt>:
    1b94:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.backuplocationvset:

00001a50 <backuplocationvset>:



void backuplocationvset(void)//backing up vset data start location to print next vset data in exact location
{
vsetx=cursor_x;
    1a50:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cursor_x>
    1a54:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cursor_x+0x1>
    1a58:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <vsetx+0x1>
    1a5c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <vsetx>
vsety=cursor_y;
    1a60:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
    1a64:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
    1a68:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <vsety+0x1>
    1a6c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <vsety>
    1a70:	08 95       	ret

Disassembly of section .text.backuplocationvactual:

00001a72 <backuplocationvactual>:
}


void backuplocationvactual(void)//backing up vactual data start location to print next vactual data in exact location
{
vactualx=cursor_x;
    1a72:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cursor_x>
    1a76:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cursor_x+0x1>
    1a7a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <vactualx+0x1>
    1a7e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <vactualx>
vactualy=cursor_y;
    1a82:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
    1a86:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
    1a8a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <vactualy+0x1>
    1a8e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <vactualy>
    1a92:	08 95       	ret

Disassembly of section .text.backuplocationiset:

00001a94 <backuplocationiset>:
}

void backuplocationiset(void)//backing up iset data start location to print next iset data in exact location
{
isetx=cursor_x;
    1a94:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cursor_x>
    1a98:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cursor_x+0x1>
    1a9c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <isetx+0x1>
    1aa0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <isetx>
isety=cursor_y;
    1aa4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
    1aa8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
    1aac:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <isety+0x1>
    1ab0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <isety>
    1ab4:	08 95       	ret

Disassembly of section .text.backuplocationiactual:

00001ab6 <backuplocationiactual>:
}


void backuplocationiactual(void)//backing up iactual data start location to print next iactual data in exact location
{
iactualx=cursor_x;
    1ab6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cursor_x>
    1aba:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cursor_x+0x1>
    1abe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <iactualx+0x1>
    1ac2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <iactualx>
iactualy=cursor_y;
    1ac6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
    1aca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
    1ace:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <iactualy+0x1>
    1ad2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <iactualy>
    1ad6:	08 95       	ret

Disassembly of section .text.ili9341_drawchar:

000012b2 <ili9341_drawchar>:
};

extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{
    12b2:	3f 92       	push	r3
    12b4:	4f 92       	push	r4
    12b6:	5f 92       	push	r5
    12b8:	6f 92       	push	r6
    12ba:	7f 92       	push	r7
    12bc:	8f 92       	push	r8
    12be:	9f 92       	push	r9
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29

if((x >=LCD_W)            || // Clip right
    12d4:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <LCD_W>
    12d8:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <LCD_W+0x1>
    12dc:	8e 17       	cp	r24, r30
    12de:	9f 07       	cpc	r25, r31
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <ili9341_drawchar+0x32>
    12e2:	a5 c0       	rjmp	.+330    	; 0x142e <ili9341_drawchar+0x17c>
(y >=LCD_H)           || // Clip bottom
    12e4:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <LCD_H>
    12e8:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <LCD_H+0x1>
extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{

if((x >=LCD_W)            || // Clip right
    12ec:	6e 17       	cp	r22, r30
    12ee:	7f 07       	cpc	r23, r31
    12f0:	08 f0       	brcs	.+2      	; 0x12f4 <ili9341_drawchar+0x42>
    12f2:	9d c0       	rjmp	.+314    	; 0x142e <ili9341_drawchar+0x17c>
(y >=LCD_H)           || // Clip bottom
((x + 6 * size - 1) < 0) || // Clip left
    12f4:	ce 2c       	mov	r12, r14
    12f6:	d1 2c       	mov	r13, r1
    12f8:	f6 01       	movw	r30, r12
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ec 0d       	add	r30, r12
    1300:	fd 1d       	adc	r31, r13
    1302:	ee 0f       	add	r30, r30
    1304:	ff 1f       	adc	r31, r31
    1306:	e8 0f       	add	r30, r24
    1308:	f9 1f       	adc	r31, r25
    130a:	31 97       	sbiw	r30, 0x01	; 1

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{

if((x >=LCD_W)            || // Clip right
(y >=LCD_H)           || // Clip bottom
    130c:	0a f4       	brpl	.+2      	; 0x1310 <ili9341_drawchar+0x5e>
    130e:	8f c0       	rjmp	.+286    	; 0x142e <ili9341_drawchar+0x17c>
((x + 6 * size - 1) < 0) || // Clip left
((y + 8 * size - 1) < 0))   // Clip top
    1310:	f6 01       	movw	r30, r12
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	e6 0f       	add	r30, r22
    1320:	f7 1f       	adc	r31, r23
    1322:	31 97       	sbiw	r30, 0x01	; 1
void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{

if((x >=LCD_W)            || // Clip right
(y >=LCD_H)           || // Clip bottom
((x + 6 * size - 1) < 0) || // Clip left
    1324:	0a f4       	brpl	.+2      	; 0x1328 <ili9341_drawchar+0x76>
    1326:	83 c0       	rjmp	.+262    	; 0x142e <ili9341_drawchar+0x17c>
    1328:	28 01       	movw	r4, r16
    132a:	59 01       	movw	r10, r18
    132c:	34 2e       	mov	r3, r20
    132e:	3b 01       	movw	r6, r22
    1330:	4c 01       	movw	r8, r24
    1332:	f1 2c       	mov	r15, r1
    1334:	78 c0       	rjmp	.+240    	; 0x1426 <ili9341_drawchar+0x174>
((y + 8 * size - 1) < 0))   // Clip top
return;
for (int8_t i=0; i<6; i++ ) {
uint8_t line;
if (i == 5) 
    1336:	15 e0       	ldi	r17, 0x05	; 5
    1338:	f1 16       	cp	r15, r17
    133a:	b1 f0       	breq	.+44     	; 0x1368 <ili9341_drawchar+0xb6>
line = 0x0;
else 
line = pgm_read_byte(font+(c*5)+i);
    133c:	83 2d       	mov	r24, r3
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	ec 01       	movw	r28, r24
    1342:	cc 0f       	add	r28, r28
    1344:	dd 1f       	adc	r29, r29
    1346:	cc 0f       	add	r28, r28
    1348:	dd 1f       	adc	r29, r29
    134a:	c8 0f       	add	r28, r24
    134c:	d9 1f       	adc	r29, r25
    134e:	cf 0d       	add	r28, r15
    1350:	d1 1d       	adc	r29, r1
    1352:	f7 fc       	sbrc	r15, 7
    1354:	da 95       	dec	r29
    1356:	ce 01       	movw	r24, r28
    1358:	dd 0f       	add	r29, r29
    135a:	aa 0b       	sbc	r26, r26
    135c:	88 53       	subi	r24, 0x38	; 56
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	af 4f       	sbci	r26, 0xFF	; 255
    1362:	fc 01       	movw	r30, r24
    1364:	c4 91       	lpm	r28, Z
    1366:	01 c0       	rjmp	.+2      	; 0x136a <ili9341_drawchar+0xb8>
((y + 8 * size - 1) < 0))   // Clip top
return;
for (int8_t i=0; i<6; i++ ) {
uint8_t line;
if (i == 5) 
line = 0x0;
    1368:	c0 e0       	ldi	r28, 0x00	; 0
    136a:	d0 e0       	ldi	r29, 0x00	; 0
    136c:	58 c0       	rjmp	.+176    	; 0x141e <ili9341_drawchar+0x16c>
else 
line = pgm_read_byte(font+(c*5)+i);
for (int8_t j = 0; j<8; j++) {
if (line & 0x1) {
    136e:	c0 ff       	sbrs	r28, 0
    1370:	29 c0       	rjmp	.+82     	; 0x13c4 <ili9341_drawchar+0x112>
if (size == 1) // default size
    1372:	f1 e0       	ldi	r31, 0x01	; 1
    1374:	ef 12       	cpse	r14, r31
    1376:	0e c0       	rjmp	.+28     	; 0x1394 <ili9341_drawchar+0xe2>
ili9341_drawpixel(x+i, y+j, color);
    1378:	a5 01       	movw	r20, r10
    137a:	b3 01       	movw	r22, r6
    137c:	6d 0f       	add	r22, r29
    137e:	71 1d       	adc	r23, r1
    1380:	d7 fd       	sbrc	r29, 7
    1382:	7a 95       	dec	r23
    1384:	c4 01       	movw	r24, r8
    1386:	8f 0d       	add	r24, r15
    1388:	91 1d       	adc	r25, r1
    138a:	f7 fc       	sbrc	r15, 7
    138c:	9a 95       	dec	r25
    138e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ili9341_drawpixel>
    1392:	43 c0       	rjmp	.+134    	; 0x141a <ili9341_drawchar+0x168>
else {  // big size
ili9341_fillrect(x+(i*size), y+(j*size), size, size, color);
    1394:	4e 2d       	mov	r20, r14
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	1d 2f       	mov	r17, r29
    139a:	96 01       	movw	r18, r12
    139c:	12 03       	mulsu	r17, r18
    139e:	b0 01       	movw	r22, r0
    13a0:	13 9f       	mul	r17, r19
    13a2:	70 0d       	add	r23, r0
    13a4:	11 24       	eor	r1, r1
    13a6:	66 0d       	add	r22, r6
    13a8:	77 1d       	adc	r23, r7
    13aa:	1f 2d       	mov	r17, r15
    13ac:	12 03       	mulsu	r17, r18
    13ae:	c0 01       	movw	r24, r0
    13b0:	13 9f       	mul	r17, r19
    13b2:	90 0d       	add	r25, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	85 01       	movw	r16, r10
    13b8:	9a 01       	movw	r18, r20
    13ba:	88 0d       	add	r24, r8
    13bc:	99 1d       	adc	r25, r9
    13be:	0e 94 29 0a 	call	0x1452	; 0x1452 <ili9341_fillrect>
    13c2:	2b c0       	rjmp	.+86     	; 0x141a <ili9341_drawchar+0x168>
} 
} else if (bg != color) {
    13c4:	a4 14       	cp	r10, r4
    13c6:	b5 04       	cpc	r11, r5
    13c8:	41 f1       	breq	.+80     	; 0x141a <ili9341_drawchar+0x168>
if (size == 1) // default size
    13ca:	21 e0       	ldi	r18, 0x01	; 1
    13cc:	e2 12       	cpse	r14, r18
    13ce:	0e c0       	rjmp	.+28     	; 0x13ec <ili9341_drawchar+0x13a>
ili9341_drawpixel(x+i, y+j, bg);
    13d0:	a2 01       	movw	r20, r4
    13d2:	b3 01       	movw	r22, r6
    13d4:	6d 0f       	add	r22, r29
    13d6:	71 1d       	adc	r23, r1
    13d8:	d7 fd       	sbrc	r29, 7
    13da:	7a 95       	dec	r23
    13dc:	c4 01       	movw	r24, r8
    13de:	8f 0d       	add	r24, r15
    13e0:	91 1d       	adc	r25, r1
    13e2:	f7 fc       	sbrc	r15, 7
    13e4:	9a 95       	dec	r25
    13e6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <ili9341_drawpixel>
    13ea:	17 c0       	rjmp	.+46     	; 0x141a <ili9341_drawchar+0x168>
else 
{  // big size
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    13ec:	4e 2d       	mov	r20, r14
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	1d 2f       	mov	r17, r29
    13f2:	96 01       	movw	r18, r12
    13f4:	12 03       	mulsu	r17, r18
    13f6:	b0 01       	movw	r22, r0
    13f8:	13 9f       	mul	r17, r19
    13fa:	70 0d       	add	r23, r0
    13fc:	11 24       	eor	r1, r1
    13fe:	66 0d       	add	r22, r6
    1400:	77 1d       	adc	r23, r7
    1402:	1f 2d       	mov	r17, r15
    1404:	12 03       	mulsu	r17, r18
    1406:	c0 01       	movw	r24, r0
    1408:	13 9f       	mul	r17, r19
    140a:	90 0d       	add	r25, r0
    140c:	11 24       	eor	r1, r1
    140e:	82 01       	movw	r16, r4
    1410:	9a 01       	movw	r18, r20
    1412:	88 0d       	add	r24, r8
    1414:	99 1d       	adc	r25, r9
    1416:	0e 94 29 0a 	call	0x1452	; 0x1452 <ili9341_fillrect>
}
}
line >>= 1;
    141a:	c6 95       	lsr	r28
uint8_t line;
if (i == 5) 
line = 0x0;
else 
line = pgm_read_byte(font+(c*5)+i);
for (int8_t j = 0; j<8; j++) {
    141c:	df 5f       	subi	r29, 0xFF	; 255
    141e:	d8 30       	cpi	r29, 0x08	; 8
    1420:	0c f4       	brge	.+2      	; 0x1424 <ili9341_drawchar+0x172>
    1422:	a5 cf       	rjmp	.-182    	; 0x136e <ili9341_drawchar+0xbc>
if((x >=LCD_W)            || // Clip right
(y >=LCD_H)           || // Clip bottom
((x + 6 * size - 1) < 0) || // Clip left
((y + 8 * size - 1) < 0))   // Clip top
return;
for (int8_t i=0; i<6; i++ ) {
    1424:	f3 94       	inc	r15
    1426:	25 e0       	ldi	r18, 0x05	; 5
    1428:	2f 15       	cp	r18, r15
    142a:	0c f0       	brlt	.+2      	; 0x142e <ili9341_drawchar+0x17c>
    142c:	84 cf       	rjmp	.-248    	; 0x1336 <ili9341_drawchar+0x84>
}
}
line >>= 1;
}
}
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	df 90       	pop	r13
    143c:	cf 90       	pop	r12
    143e:	bf 90       	pop	r11
    1440:	af 90       	pop	r10
    1442:	9f 90       	pop	r9
    1444:	8f 90       	pop	r8
    1446:	7f 90       	pop	r7
    1448:	6f 90       	pop	r6
    144a:	5f 90       	pop	r5
    144c:	4f 90       	pop	r4
    144e:	3f 90       	pop	r3
    1450:	08 95       	ret

Disassembly of section .text.ili9341_setcursor:

00001b3e <ili9341_setcursor>:


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
cursor_x=x;
    1b3e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cursor_x+0x1>
    1b42:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <cursor_x>
cursor_y=y;
    1b46:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <cursor_y+0x1>
    1b4a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <cursor_y>
    1b4e:	08 95       	ret

Disassembly of section .text.ili9341_settextcolour:

00001b50 <ili9341_settextcolour>:
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
textcolour=x;
    1b50:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <textcolour+0x1>
    1b54:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <textcolour>
textbgcolour=y;
    1b58:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1b5c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b60:	08 95       	ret

Disassembly of section .text.ili9341_settextsize:

00001b74 <ili9341_settextsize>:
}

void ili9341_settextsize(uint8_t s)
{
if(s>8) return;
    1b74:	89 30       	cpi	r24, 0x09	; 9
    1b76:	28 f4       	brcc	.+10     	; 0x1b82 <ili9341_settextsize+0xe>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    1b78:	81 11       	cpse	r24, r1
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <ili9341_settextsize+0xa>
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <textsize>
    1b82:	08 95       	ret

Disassembly of section .text.ili9341_write:

00001672 <ili9341_write>:
}

void ili9341_write(uint8_t c)//write a character at setted coordinates after setting location and colour
{
    1672:	ef 92       	push	r14
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
if (c == '\n') {
    1678:	8a 30       	cpi	r24, 0x0A	; 10
    167a:	c1 f4       	brne	.+48     	; 0x16ac <ili9341_write+0x3a>
cursor_y += textsize*8;
    167c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <textsize>
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <cursor_y>
    1692:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <cursor_y+0x1>
    1696:	82 0f       	add	r24, r18
    1698:	93 1f       	adc	r25, r19
    169a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cursor_y+0x1>
    169e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cursor_y>
cursor_x  = 0;
    16a2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cursor_x+0x1>
    16a6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <cursor_x>
    16aa:	2b c0       	rjmp	.+86     	; 0x1702 <ili9341_write+0x90>
} else if (c == '\r') {
    16ac:	8d 30       	cpi	r24, 0x0D	; 13
    16ae:	49 f1       	breq	.+82     	; 0x1702 <ili9341_write+0x90>
    16b0:	48 2f       	mov	r20, r24
 // skip em
}
else
{
ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
    16b2:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <textsize>
    16b6:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    16ba:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    16be:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <textcolour>
    16c2:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <textcolour+0x1>
    16c6:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <cursor_y>
    16ca:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <cursor_y+0x1>
    16ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cursor_x>
    16d2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cursor_x+0x1>
    16d6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <ili9341_drawchar>
cursor_x += textsize*6;
    16da:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <textsize>
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9c 01       	movw	r18, r24
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	82 0f       	add	r24, r18
    16e8:	93 1f       	adc	r25, r19
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cursor_x>
    16f2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <cursor_x+0x1>
    16f6:	82 0f       	add	r24, r18
    16f8:	93 1f       	adc	r25, r19
    16fa:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cursor_x+0x1>
    16fe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <cursor_x>
}
}
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ef 90       	pop	r14
    1708:	08 95       	ret

Disassembly of section .text.ili9341_putchar_printf:

00001b8e <ili9341_putchar_printf>:

static FILE mydata = FDEV_SETUP_STREAM(ili9341_putchar_printf, NULL, _FDEV_SETUP_WRITE);//mydata declaration and converting it into stream
 
int16_t ili9341_putchar_printf(char var, FILE *stream)//this function will be called whenever printf is used
{
ili9341_write(var);
    1b8e:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
}
    1b92:	08 95       	ret

Disassembly of section .text.display_init:

00000a4c <display_init>:
}
}


void display_init(void)//display initial data regarding my power supply
{
 a4c:	cf 92       	push	r12
 a4e:	df 92       	push	r13
 a50:	ef 92       	push	r14
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
stdout = & mydata;//it is used for printf function and must be declared locally
 a56:	8f e1       	ldi	r24, 0x1F	; 31
 a58:	91 e0       	ldi	r25, 0x01	; 1
 a5a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <__iob+0x3>
 a5e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <__iob+0x2>
ili9341_setcursor(4,4);
 a62:	64 e0       	ldi	r22, 0x04	; 4
 a64:	70 e0       	ldi	r23, 0x00	; 0
 a66:	84 e0       	ldi	r24, 0x04	; 4
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a6e:	8f e3       	ldi	r24, 0x3F	; 63
 a70:	9f e1       	ldi	r25, 0x1F	; 31
 a72:	01 97       	sbiw	r24, 0x01	; 1
 a74:	f1 f7       	brne	.-4      	; 0xa72 <display_init+0x26>
 a76:	00 c0       	rjmp	.+0      	; 0xa78 <display_init+0x2c>
 a78:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(GREEN,BLACK);
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	70 e0       	ldi	r23, 0x00	; 0
 a7e:	80 ee       	ldi	r24, 0xE0	; 224
 a80:	97 e0       	ldi	r25, 0x07	; 7
 a82:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ili9341_settextcolour>
 a86:	8f e3       	ldi	r24, 0x3F	; 63
 a88:	9f e1       	ldi	r25, 0x1F	; 31
 a8a:	01 97       	sbiw	r24, 0x01	; 1
 a8c:	f1 f7       	brne	.-4      	; 0xa8a <display_init+0x3e>
 a8e:	00 c0       	rjmp	.+0      	; 0xa90 <display_init+0x44>
 a90:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(2);
 a92:	82 e0       	ldi	r24, 0x02	; 2
 a94:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 a98:	8f e3       	ldi	r24, 0x3F	; 63
 a9a:	9f e1       	ldi	r25, 0x1F	; 31
 a9c:	01 97       	sbiw	r24, 0x01	; 1
 a9e:	f1 f7       	brne	.-4      	; 0xa9c <display_init+0x50>
 aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <display_init+0x56>
 aa2:	00 00       	nop
_delay_ms(2);
printf("mode - ");
 aa4:	83 ec       	ldi	r24, 0xC3	; 195
 aa6:	95 e0       	ldi	r25, 0x05	; 5
 aa8:	a0 e0       	ldi	r26, 0x00	; 0
 aaa:	af 93       	push	r26
 aac:	9f 93       	push	r25
 aae:	8f 93       	push	r24
 ab0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <printf>
 ab4:	8f e3       	ldi	r24, 0x3F	; 63
 ab6:	9f e1       	ldi	r25, 0x1F	; 31
 ab8:	01 97       	sbiw	r24, 0x01	; 1
 aba:	f1 f7       	brne	.-4      	; 0xab8 <display_init+0x6c>
 abc:	00 c0       	rjmp	.+0      	; 0xabe <display_init+0x72>
 abe:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(RED,BLACK);
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	80 e0       	ldi	r24, 0x00	; 0
 ac6:	98 ef       	ldi	r25, 0xF8	; 248
 ac8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ili9341_settextcolour>
 acc:	8f e3       	ldi	r24, 0x3F	; 63
 ace:	9f e1       	ldi	r25, 0x1F	; 31
 ad0:	01 97       	sbiw	r24, 0x01	; 1
 ad2:	f1 f7       	brne	.-4      	; 0xad0 <display_init+0x84>
 ad4:	00 c0       	rjmp	.+0      	; 0xad6 <display_init+0x8a>
 ad6:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(2);
 ad8:	82 e0       	ldi	r24, 0x02	; 2
 ada:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 ade:	8f e3       	ldi	r24, 0x3F	; 63
 ae0:	9f e1       	ldi	r25, 0x1F	; 31
 ae2:	01 97       	sbiw	r24, 0x01	; 1
 ae4:	f1 f7       	brne	.-4      	; 0xae2 <display_init+0x96>
 ae6:	00 c0       	rjmp	.+0      	; 0xae8 <display_init+0x9c>
 ae8:	00 00       	nop
_delay_ms(2);
printf("constant voltage");
 aea:	8b ec       	ldi	r24, 0xCB	; 203
 aec:	95 e0       	ldi	r25, 0x05	; 5
 aee:	a0 e0       	ldi	r26, 0x00	; 0
 af0:	af 93       	push	r26
 af2:	9f 93       	push	r25
 af4:	8f 93       	push	r24
 af6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <printf>
 afa:	8f e3       	ldi	r24, 0x3F	; 63
 afc:	9f e1       	ldi	r25, 0x1F	; 31
 afe:	01 97       	sbiw	r24, 0x01	; 1
 b00:	f1 f7       	brne	.-4      	; 0xafe <display_init+0xb2>
 b02:	00 c0       	rjmp	.+0      	; 0xb04 <display_init+0xb8>
 b04:	00 00       	nop
_delay_ms(2);
ili9341_setcursor(4,40);
 b06:	68 e2       	ldi	r22, 0x28	; 40
 b08:	70 e0       	ldi	r23, 0x00	; 0
 b0a:	84 e0       	ldi	r24, 0x04	; 4
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
 b12:	8f e3       	ldi	r24, 0x3F	; 63
 b14:	9f e1       	ldi	r25, 0x1F	; 31
 b16:	01 97       	sbiw	r24, 0x01	; 1
 b18:	f1 f7       	brne	.-4      	; 0xb16 <display_init+0xca>
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <display_init+0xd0>
 b1c:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(CYAN,BLACK);
 b1e:	60 e0       	ldi	r22, 0x00	; 0
 b20:	70 e0       	ldi	r23, 0x00	; 0
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	97 e0       	ldi	r25, 0x07	; 7
 b26:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ili9341_settextcolour>
 b2a:	8f e3       	ldi	r24, 0x3F	; 63
 b2c:	9f e1       	ldi	r25, 0x1F	; 31
 b2e:	01 97       	sbiw	r24, 0x01	; 1
 b30:	f1 f7       	brne	.-4      	; 0xb2e <display_init+0xe2>
 b32:	00 c0       	rjmp	.+0      	; 0xb34 <display_init+0xe8>
 b34:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
 b36:	84 e0       	ldi	r24, 0x04	; 4
 b38:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 b3c:	8f e3       	ldi	r24, 0x3F	; 63
 b3e:	9f e1       	ldi	r25, 0x1F	; 31
 b40:	01 97       	sbiw	r24, 0x01	; 1
 b42:	f1 f7       	brne	.-4      	; 0xb40 <display_init+0xf4>
 b44:	00 c0       	rjmp	.+0      	; 0xb46 <display_init+0xfa>
 b46:	00 00       	nop
_delay_ms(2);
ili9341_write('V');
 b48:	86 e5       	ldi	r24, 0x56	; 86
 b4a:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
 b4e:	8f e3       	ldi	r24, 0x3F	; 63
 b50:	9f e1       	ldi	r25, 0x1F	; 31
 b52:	01 97       	sbiw	r24, 0x01	; 1
 b54:	f1 f7       	brne	.-4      	; 0xb52 <display_init+0x106>
 b56:	00 c0       	rjmp	.+0      	; 0xb58 <display_init+0x10c>
 b58:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+6;
 b5a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
 b5e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
 b62:	06 96       	adiw	r24, 0x06	; 6
 b64:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cursor_y+0x1>
 b68:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cursor_y>
ili9341_settextsize(3);
 b6c:	83 e0       	ldi	r24, 0x03	; 3
 b6e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 b72:	8f e3       	ldi	r24, 0x3F	; 63
 b74:	9f e1       	ldi	r25, 0x1F	; 31
 b76:	01 97       	sbiw	r24, 0x01	; 1
 b78:	f1 f7       	brne	.-4      	; 0xb76 <display_init+0x12a>
 b7a:	00 c0       	rjmp	.+0      	; 0xb7c <display_init+0x130>
 b7c:	00 00       	nop
_delay_ms(2);
printf("set\n");
 b7e:	6c ed       	ldi	r22, 0xDC	; 220
 b80:	75 e0       	ldi	r23, 0x05	; 5
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	0e 94 85 0b 	call	0x170a	; 0x170a <puts>
 b88:	8f e3       	ldi	r24, 0x3F	; 63
 b8a:	9f e1       	ldi	r25, 0x1F	; 31
 b8c:	01 97       	sbiw	r24, 0x01	; 1
 b8e:	f1 f7       	brne	.-4      	; 0xb8c <display_init+0x140>
 b90:	00 c0       	rjmp	.+0      	; 0xb92 <display_init+0x146>
 b92:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+12;
 b94:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
 b98:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
 b9c:	0c 96       	adiw	r24, 0x0c	; 12
 b9e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cursor_y+0x1>
 ba2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cursor_y>
backuplocationvset();
 ba6:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <backuplocationvset>
printf("00.00v");
 baa:	80 ee       	ldi	r24, 0xE0	; 224
 bac:	95 e0       	ldi	r25, 0x05	; 5
 bae:	a0 e0       	ldi	r26, 0x00	; 0
 bb0:	af 93       	push	r26
 bb2:	9f 93       	push	r25
 bb4:	8f 93       	push	r24
 bb6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <printf>
 bba:	8f e3       	ldi	r24, 0x3F	; 63
 bbc:	9f e1       	ldi	r25, 0x1F	; 31
 bbe:	01 97       	sbiw	r24, 0x01	; 1
 bc0:	f1 f7       	brne	.-4      	; 0xbbe <display_init+0x172>
 bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <display_init+0x178>
 bc4:	00 00       	nop
_delay_ms(2);
ili9341_setcursor(4,120);
 bc6:	68 e7       	ldi	r22, 0x78	; 120
 bc8:	70 e0       	ldi	r23, 0x00	; 0
 bca:	84 e0       	ldi	r24, 0x04	; 4
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
 bd2:	8f e3       	ldi	r24, 0x3F	; 63
 bd4:	9f e1       	ldi	r25, 0x1F	; 31
 bd6:	01 97       	sbiw	r24, 0x01	; 1
 bd8:	f1 f7       	brne	.-4      	; 0xbd6 <display_init+0x18a>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <display_init+0x190>
 bdc:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
 bde:	84 e0       	ldi	r24, 0x04	; 4
 be0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 be4:	8f e3       	ldi	r24, 0x3F	; 63
 be6:	9f e1       	ldi	r25, 0x1F	; 31
 be8:	01 97       	sbiw	r24, 0x01	; 1
 bea:	f1 f7       	brne	.-4      	; 0xbe8 <display_init+0x19c>
 bec:	00 c0       	rjmp	.+0      	; 0xbee <display_init+0x1a2>
 bee:	00 00       	nop
_delay_ms(2);
ili9341_write('V');
 bf0:	86 e5       	ldi	r24, 0x56	; 86
 bf2:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
 bf6:	8f e3       	ldi	r24, 0x3F	; 63
 bf8:	9f e1       	ldi	r25, 0x1F	; 31
 bfa:	01 97       	sbiw	r24, 0x01	; 1
 bfc:	f1 f7       	brne	.-4      	; 0xbfa <display_init+0x1ae>
 bfe:	00 c0       	rjmp	.+0      	; 0xc00 <display_init+0x1b4>
 c00:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+6;
 c02:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
 c06:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
 c0a:	06 96       	adiw	r24, 0x06	; 6
 c0c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cursor_y+0x1>
 c10:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cursor_y>
ili9341_settextsize(3);
 c14:	83 e0       	ldi	r24, 0x03	; 3
 c16:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 c1a:	8f e3       	ldi	r24, 0x3F	; 63
 c1c:	9f e1       	ldi	r25, 0x1F	; 31
 c1e:	01 97       	sbiw	r24, 0x01	; 1
 c20:	f1 f7       	brne	.-4      	; 0xc1e <display_init+0x1d2>
 c22:	00 c0       	rjmp	.+0      	; 0xc24 <display_init+0x1d8>
 c24:	00 00       	nop
_delay_ms(2);
printf("actual\n\n");
 c26:	67 ee       	ldi	r22, 0xE7	; 231
 c28:	75 e0       	ldi	r23, 0x05	; 5
 c2a:	80 e0       	ldi	r24, 0x00	; 0
 c2c:	0e 94 85 0b 	call	0x170a	; 0x170a <puts>
 c30:	8f e3       	ldi	r24, 0x3F	; 63
 c32:	9f e1       	ldi	r25, 0x1F	; 31
 c34:	01 97       	sbiw	r24, 0x01	; 1
 c36:	f1 f7       	brne	.-4      	; 0xc34 <display_init+0x1e8>
 c38:	00 c0       	rjmp	.+0      	; 0xc3a <display_init+0x1ee>
 c3a:	00 00       	nop
_delay_ms(2);
backuplocationvactual();
 c3c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <backuplocationvactual>
ili9341_settextsize(5);
 c40:	85 e0       	ldi	r24, 0x05	; 5
 c42:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
printf("00.00");
 c46:	0f 2e       	mov	r0, r31
 c48:	ff ee       	ldi	r31, 0xEF	; 239
 c4a:	cf 2e       	mov	r12, r31
 c4c:	f5 e0       	ldi	r31, 0x05	; 5
 c4e:	df 2e       	mov	r13, r31
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	ef 2e       	mov	r14, r31
 c54:	f0 2d       	mov	r31, r0
 c56:	ef 92       	push	r14
 c58:	df 92       	push	r13
 c5a:	cf 92       	push	r12
 c5c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <printf>
 c60:	8f e3       	ldi	r24, 0x3F	; 63
 c62:	9f e1       	ldi	r25, 0x1F	; 31
 c64:	01 97       	sbiw	r24, 0x01	; 1
 c66:	f1 f7       	brne	.-4      	; 0xc64 <display_init+0x218>
 c68:	00 c0       	rjmp	.+0      	; 0xc6a <display_init+0x21e>
 c6a:	00 00       	nop
_delay_ms(2);



ili9341_setcursor(164,40);
 c6c:	68 e2       	ldi	r22, 0x28	; 40
 c6e:	70 e0       	ldi	r23, 0x00	; 0
 c70:	84 ea       	ldi	r24, 0xA4	; 164
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
 c78:	8f e3       	ldi	r24, 0x3F	; 63
 c7a:	9f e1       	ldi	r25, 0x1F	; 31
 c7c:	01 97       	sbiw	r24, 0x01	; 1
 c7e:	f1 f7       	brne	.-4      	; 0xc7c <display_init+0x230>
 c80:	00 c0       	rjmp	.+0      	; 0xc82 <display_init+0x236>
 c82:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(YELLOW,BLACK);
 c84:	60 e0       	ldi	r22, 0x00	; 0
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	80 ee       	ldi	r24, 0xE0	; 224
 c8a:	9f ef       	ldi	r25, 0xFF	; 255
 c8c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ili9341_settextcolour>
 c90:	8f e3       	ldi	r24, 0x3F	; 63
 c92:	9f e1       	ldi	r25, 0x1F	; 31
 c94:	01 97       	sbiw	r24, 0x01	; 1
 c96:	f1 f7       	brne	.-4      	; 0xc94 <display_init+0x248>
 c98:	00 c0       	rjmp	.+0      	; 0xc9a <display_init+0x24e>
 c9a:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
 c9c:	84 e0       	ldi	r24, 0x04	; 4
 c9e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 ca2:	8f e3       	ldi	r24, 0x3F	; 63
 ca4:	9f e1       	ldi	r25, 0x1F	; 31
 ca6:	01 97       	sbiw	r24, 0x01	; 1
 ca8:	f1 f7       	brne	.-4      	; 0xca6 <display_init+0x25a>
 caa:	00 c0       	rjmp	.+0      	; 0xcac <display_init+0x260>
 cac:	00 00       	nop
_delay_ms(2);
ili9341_write('I');
 cae:	89 e4       	ldi	r24, 0x49	; 73
 cb0:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
 cb4:	8f e3       	ldi	r24, 0x3F	; 63
 cb6:	9f e1       	ldi	r25, 0x1F	; 31
 cb8:	01 97       	sbiw	r24, 0x01	; 1
 cba:	f1 f7       	brne	.-4      	; 0xcb8 <display_init+0x26c>
 cbc:	00 c0       	rjmp	.+0      	; 0xcbe <display_init+0x272>
 cbe:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+6;
 cc0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
 cc4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
 cc8:	06 96       	adiw	r24, 0x06	; 6
 cca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cursor_y+0x1>
 cce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cursor_y>
ili9341_settextsize(3);
 cd2:	83 e0       	ldi	r24, 0x03	; 3
 cd4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 cd8:	8f e3       	ldi	r24, 0x3F	; 63
 cda:	9f e1       	ldi	r25, 0x1F	; 31
 cdc:	01 97       	sbiw	r24, 0x01	; 1
 cde:	f1 f7       	brne	.-4      	; 0xcdc <display_init+0x290>
 ce0:	00 c0       	rjmp	.+0      	; 0xce2 <display_init+0x296>
 ce2:	00 00       	nop
_delay_ms(2);
printf("set");
 ce4:	8c ed       	ldi	r24, 0xDC	; 220
 ce6:	95 e0       	ldi	r25, 0x05	; 5
 ce8:	a0 e0       	ldi	r26, 0x00	; 0
 cea:	af 93       	push	r26
 cec:	9f 93       	push	r25
 cee:	8f 93       	push	r24
 cf0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <printf>
 cf4:	8f e3       	ldi	r24, 0x3F	; 63
 cf6:	9f e1       	ldi	r25, 0x1F	; 31
 cf8:	01 97       	sbiw	r24, 0x01	; 1
 cfa:	f1 f7       	brne	.-4      	; 0xcf8 <display_init+0x2ac>
 cfc:	00 c0       	rjmp	.+0      	; 0xcfe <display_init+0x2b2>
 cfe:	00 00       	nop
_delay_ms(2);
cursor_x=164;
 d00:	c4 ea       	ldi	r28, 0xA4	; 164
 d02:	d0 e0       	ldi	r29, 0x00	; 0
 d04:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <cursor_x+0x1>
 d08:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <cursor_x>
cursor_y=(cursor_y+36);
 d0c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
 d10:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
 d14:	84 96       	adiw	r24, 0x24	; 36
 d16:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cursor_y+0x1>
 d1a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cursor_y>
backuplocationiset();
 d1e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <backuplocationiset>
ili9341_settextsize(3);
 d22:	83 e0       	ldi	r24, 0x03	; 3
 d24:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
printf("00.00a");
 d28:	85 ef       	ldi	r24, 0xF5	; 245
 d2a:	95 e0       	ldi	r25, 0x05	; 5
 d2c:	a0 e0       	ldi	r26, 0x00	; 0
 d2e:	af 93       	push	r26
 d30:	9f 93       	push	r25
 d32:	8f 93       	push	r24
 d34:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <printf>
 d38:	8f e3       	ldi	r24, 0x3F	; 63
 d3a:	9f e1       	ldi	r25, 0x1F	; 31
 d3c:	01 97       	sbiw	r24, 0x01	; 1
 d3e:	f1 f7       	brne	.-4      	; 0xd3c <display_init+0x2f0>
 d40:	00 c0       	rjmp	.+0      	; 0xd42 <display_init+0x2f6>
 d42:	00 00       	nop
_delay_ms(2);
ili9341_setcursor(164,120);
 d44:	68 e7       	ldi	r22, 0x78	; 120
 d46:	70 e0       	ldi	r23, 0x00	; 0
 d48:	84 ea       	ldi	r24, 0xA4	; 164
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
 d50:	8f e3       	ldi	r24, 0x3F	; 63
 d52:	9f e1       	ldi	r25, 0x1F	; 31
 d54:	01 97       	sbiw	r24, 0x01	; 1
 d56:	f1 f7       	brne	.-4      	; 0xd54 <display_init+0x308>
 d58:	00 c0       	rjmp	.+0      	; 0xd5a <display_init+0x30e>
 d5a:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
 d5c:	84 e0       	ldi	r24, 0x04	; 4
 d5e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 d62:	8f e3       	ldi	r24, 0x3F	; 63
 d64:	9f e1       	ldi	r25, 0x1F	; 31
 d66:	01 97       	sbiw	r24, 0x01	; 1
 d68:	f1 f7       	brne	.-4      	; 0xd66 <display_init+0x31a>
 d6a:	00 c0       	rjmp	.+0      	; 0xd6c <display_init+0x320>
 d6c:	00 00       	nop
_delay_ms(2);
ili9341_write('I');
 d6e:	89 e4       	ldi	r24, 0x49	; 73
 d70:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
 d74:	8f e3       	ldi	r24, 0x3F	; 63
 d76:	9f e1       	ldi	r25, 0x1F	; 31
 d78:	01 97       	sbiw	r24, 0x01	; 1
 d7a:	f1 f7       	brne	.-4      	; 0xd78 <display_init+0x32c>
 d7c:	00 c0       	rjmp	.+0      	; 0xd7e <display_init+0x332>
 d7e:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+6;
 d80:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
 d84:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
 d88:	06 96       	adiw	r24, 0x06	; 6
 d8a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cursor_y+0x1>
 d8e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cursor_y>
ili9341_settextsize(3);
 d92:	83 e0       	ldi	r24, 0x03	; 3
 d94:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
 d98:	8f e3       	ldi	r24, 0x3F	; 63
 d9a:	9f e1       	ldi	r25, 0x1F	; 31
 d9c:	01 97       	sbiw	r24, 0x01	; 1
 d9e:	f1 f7       	brne	.-4      	; 0xd9c <display_init+0x350>
 da0:	00 c0       	rjmp	.+0      	; 0xda2 <display_init+0x356>
 da2:	00 00       	nop
_delay_ms(2);
printf("actual");
 da4:	8c ef       	ldi	r24, 0xFC	; 252
 da6:	95 e0       	ldi	r25, 0x05	; 5
 da8:	a0 e0       	ldi	r26, 0x00	; 0
 daa:	af 93       	push	r26
 dac:	9f 93       	push	r25
 dae:	8f 93       	push	r24
 db0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <printf>
 db4:	8f e3       	ldi	r24, 0x3F	; 63
 db6:	9f e1       	ldi	r25, 0x1F	; 31
 db8:	01 97       	sbiw	r24, 0x01	; 1
 dba:	f1 f7       	brne	.-4      	; 0xdb8 <display_init+0x36c>
 dbc:	00 c0       	rjmp	.+0      	; 0xdbe <display_init+0x372>
 dbe:	00 00       	nop
_delay_ms(2);
cursor_x=164;
 dc0:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <cursor_x+0x1>
 dc4:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <cursor_x>
backuplocationiactual();
 dc8:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <backuplocationiactual>
cursor_y=cursor_y+48;
 dcc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cursor_y>
 dd0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <cursor_y+0x1>
 dd4:	c0 96       	adiw	r24, 0x30	; 48
 dd6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <cursor_y+0x1>
 dda:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cursor_y>
ili9341_settextsize(5);
 dde:	85 e0       	ldi	r24, 0x05	; 5
 de0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
printf("00.00");
 de4:	ef 92       	push	r14
 de6:	df 92       	push	r13
 de8:	cf 92       	push	r12
 dea:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <printf>
 dee:	9f ef       	ldi	r25, 0xFF	; 255
 df0:	27 ea       	ldi	r18, 0xA7	; 167
 df2:	81 e6       	ldi	r24, 0x61	; 97
 df4:	91 50       	subi	r25, 0x01	; 1
 df6:	20 40       	sbci	r18, 0x00	; 0
 df8:	80 40       	sbci	r24, 0x00	; 0
 dfa:	e1 f7       	brne	.-8      	; 0xdf4 <display_init+0x3a8>
 dfc:	00 c0       	rjmp	.+0      	; 0xdfe <display_init+0x3b2>
 dfe:	00 00       	nop
_delay_ms(2000);

}
 e00:	8d b7       	in	r24, 0x3d	; 61
 e02:	9e b7       	in	r25, 0x3e	; 62
 e04:	48 96       	adiw	r24, 0x18	; 24
 e06:	0f b6       	in	r0, 0x3f	; 63
 e08:	f8 94       	cli
 e0a:	9e bf       	out	0x3e, r25	; 62
 e0c:	0f be       	out	0x3f, r0	; 63
 e0e:	8d bf       	out	0x3d, r24	; 61
 e10:	df 91       	pop	r29
 e12:	cf 91       	pop	r28
 e14:	ef 90       	pop	r14
 e16:	df 90       	pop	r13
 e18:	cf 90       	pop	r12
 e1a:	08 95       	ret

Disassembly of section .text.ili9341_hard_init:

00001b62 <ili9341_hard_init>:
volatile uint16_t LCD_W=ILI9341_TFTWIDTH;
volatile uint16_t LCD_H=ILI9341_TFTHEIGHT;

void ili9341_hard_init(void)//init hardware
{
rstddr=0xFF;//output for reset
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	8a b9       	out	0x0a, r24	; 10
rstport |=(1<<rst);//pull high for normal operation
    1b66:	8b b1       	in	r24, 0x0b	; 11
    1b68:	80 68       	ori	r24, 0x80	; 128
    1b6a:	8b b9       	out	0x0b, r24	; 11
controlddr|=(1<<dc);//D/C as output
    1b6c:	84 b1       	in	r24, 0x04	; 4
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	84 b9       	out	0x04, r24	; 4
    1b72:	08 95       	ret

Disassembly of section .text.ili9341_spi_init:

00001b12 <ili9341_spi_init>:
}


void ili9341_spi_init(void)//set spi speed and settings 
{
DDRB |=(1<<1)|(1<<2)|(1<<3)|(1<<5);//CS,SS,MOSI,SCK as output(although SS will be unused throughout the program)
    1b12:	84 b1       	in	r24, 0x04	; 4
    1b14:	8e 62       	ori	r24, 0x2E	; 46
    1b16:	84 b9       	out	0x04, r24	; 4
SPCR=(1<<SPE)|(1<<MSTR);//mode 0,fosc/4
    1b18:	80 e5       	ldi	r24, 0x50	; 80
    1b1a:	8c bd       	out	0x2c, r24	; 44
SPSR |=(1<<SPI2X);//doubling spi speed.i.e final spi speed-fosc/2
    1b1c:	8d b5       	in	r24, 0x2d	; 45
    1b1e:	81 60       	ori	r24, 0x01	; 1
    1b20:	8d bd       	out	0x2d, r24	; 45
PORTB |=(1<<1);//cs off during startup
    1b22:	85 b1       	in	r24, 0x05	; 5
    1b24:	82 60       	ori	r24, 0x02	; 2
    1b26:	85 b9       	out	0x05, r24	; 5
    1b28:	08 95       	ret

Disassembly of section .text.ili9341_spi_send:

00001b84 <ili9341_spi_send>:
}


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
SPDR=spi_data;//move data into spdr
    1b84:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
    1b86:	0d b4       	in	r0, 0x2d	; 45
    1b88:	07 fe       	sbrs	r0, 7
    1b8a:	fd cf       	rjmp	.-6      	; 0x1b86 <ili9341_spi_send+0x2>
}
    1b8c:	08 95       	ret

Disassembly of section .text.ili9341_writecommand8:

00001af8 <ili9341_writecommand8>:


void ili9341_writecommand8(uint8_t com)//command write
{
controlport &=~((1<<dc)|(1<<cs));//dc and cs both low to send command
    1af8:	95 b1       	in	r25, 0x05	; 5
    1afa:	9c 7f       	andi	r25, 0xFC	; 252
    1afc:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1afe:	9a e1       	ldi	r25, 0x1A	; 26
    1b00:	9a 95       	dec	r25
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <ili9341_writecommand8+0x8>
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <ili9341_writecommand8+0xe>
_delay_us(5);//little delay
ili9341_spi_send(com);
    1b06:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <ili9341_spi_send>
controlport |=(1<<cs);//pull high cs
    1b0a:	85 b1       	in	r24, 0x05	; 5
    1b0c:	82 60       	ori	r24, 0x02	; 2
    1b0e:	85 b9       	out	0x05, r24	; 5
    1b10:	08 95       	ret

Disassembly of section .text.ili9341_writedata8:

00001ad8 <ili9341_writedata8>:
}


void ili9341_writedata8(uint8_t data)//data write
{
controlport |=(1<<dc);//st dc high for data
    1ad8:	95 b1       	in	r25, 0x05	; 5
    1ada:	91 60       	ori	r25, 0x01	; 1
    1adc:	95 b9       	out	0x05, r25	; 5
    1ade:	95 e0       	ldi	r25, 0x05	; 5
    1ae0:	9a 95       	dec	r25
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <ili9341_writedata8+0x8>
    1ae4:	00 00       	nop
_delay_us(1);//delay
controlport &=~(1<<cs);//set cs low for operation
    1ae6:	95 b1       	in	r25, 0x05	; 5
    1ae8:	9d 7f       	andi	r25, 0xFD	; 253
    1aea:	95 b9       	out	0x05, r25	; 5
ili9341_spi_send(data);
    1aec:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <ili9341_spi_send>
controlport |=(1<<cs);
    1af0:	85 b1       	in	r24, 0x05	; 5
    1af2:	82 60       	ori	r24, 0x02	; 2
    1af4:	85 b9       	out	0x05, r24	; 5
    1af6:	08 95       	ret

Disassembly of section .text.ili9341_setaddress:

00001888 <ili9341_setaddress>:
}


void ili9341_setaddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)//set coordinate for print or other function
{
    1888:	df 92       	push	r13
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	e8 2e       	mov	r14, r24
    1898:	d9 2e       	mov	r13, r25
    189a:	d6 2f       	mov	r29, r22
    189c:	17 2f       	mov	r17, r23
    189e:	04 2f       	mov	r16, r20
    18a0:	f5 2e       	mov	r15, r21
    18a2:	c2 2f       	mov	r28, r18
ili9341_writecommand8(0x2A);
    18a4:	8a e2       	ldi	r24, 0x2A	; 42
    18a6:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
ili9341_writedata8(x1>>8);
    18aa:	8d 2d       	mov	r24, r13
    18ac:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
ili9341_writedata8(x1);
    18b0:	8e 2d       	mov	r24, r14
    18b2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
ili9341_writedata8(x2>>8);
    18b6:	8f 2d       	mov	r24, r15
    18b8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
ili9341_writedata8(x2);
    18bc:	80 2f       	mov	r24, r16
    18be:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>

ili9341_writecommand8(0x2B);
    18c2:	8b e2       	ldi	r24, 0x2B	; 43
    18c4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
ili9341_writedata8(y1>>8);
    18c8:	81 2f       	mov	r24, r17
    18ca:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
ili9341_writedata8(y1);
    18ce:	8d 2f       	mov	r24, r29
    18d0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
ili9341_writedata8(y2);
    18d4:	8c 2f       	mov	r24, r28
    18d6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
ili9341_writedata8(y2);
    18da:	8c 2f       	mov	r24, r28
    18dc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>

ili9341_writecommand8(0x2C);//meory write
    18e0:	8c e2       	ldi	r24, 0x2C	; 44
    18e2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	08 95       	ret

Disassembly of section .text.ili9341_hard_reset:

000018f6 <ili9341_hard_reset>:


void ili9341_hard_reset(void)//hard reset display
{
rstport |=(1<<rst);//pull high if low previously
    18f6:	8b b1       	in	r24, 0x0b	; 11
    18f8:	80 68       	ori	r24, 0x80	; 128
    18fa:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18fc:	2f ef       	ldi	r18, 0xFF	; 255
    18fe:	83 ec       	ldi	r24, 0xC3	; 195
    1900:	99 e0       	ldi	r25, 0x09	; 9
    1902:	21 50       	subi	r18, 0x01	; 1
    1904:	80 40       	sbci	r24, 0x00	; 0
    1906:	90 40       	sbci	r25, 0x00	; 0
    1908:	e1 f7       	brne	.-8      	; 0x1902 <ili9341_hard_reset+0xc>
    190a:	00 c0       	rjmp	.+0      	; 0x190c <ili9341_hard_reset+0x16>
    190c:	00 00       	nop
_delay_ms(200);
rstport &=~(1<<rst);//low for reset
    190e:	8b b1       	in	r24, 0x0b	; 11
    1910:	8f 77       	andi	r24, 0x7F	; 127
    1912:	8b b9       	out	0x0b, r24	; 11
    1914:	2f ef       	ldi	r18, 0xFF	; 255
    1916:	83 ec       	ldi	r24, 0xC3	; 195
    1918:	99 e0       	ldi	r25, 0x09	; 9
    191a:	21 50       	subi	r18, 0x01	; 1
    191c:	80 40       	sbci	r24, 0x00	; 0
    191e:	90 40       	sbci	r25, 0x00	; 0
    1920:	e1 f7       	brne	.-8      	; 0x191a <ili9341_hard_reset+0x24>
    1922:	00 c0       	rjmp	.+0      	; 0x1924 <ili9341_hard_reset+0x2e>
    1924:	00 00       	nop
_delay_ms(200);
rstport |=(1<<rst);//again pull high for normal operation
    1926:	8b b1       	in	r24, 0x0b	; 11
    1928:	80 68       	ori	r24, 0x80	; 128
    192a:	8b b9       	out	0x0b, r24	; 11
    192c:	2f ef       	ldi	r18, 0xFF	; 255
    192e:	83 ec       	ldi	r24, 0xC3	; 195
    1930:	99 e0       	ldi	r25, 0x09	; 9
    1932:	21 50       	subi	r18, 0x01	; 1
    1934:	80 40       	sbci	r24, 0x00	; 0
    1936:	90 40       	sbci	r25, 0x00	; 0
    1938:	e1 f7       	brne	.-8      	; 0x1932 <ili9341_hard_reset+0x3c>
    193a:	00 c0       	rjmp	.+0      	; 0x193c <ili9341_hard_reset+0x46>
    193c:	00 00       	nop
    193e:	08 95       	ret

Disassembly of section .text.ili9341_init:

0000108e <ili9341_init>:
ili9341_setaddress(x,y,x+w-1,y);
while(w--)
{
ili9341_pushcolour(colour);
}
}
    108e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <ili9341_hard_init>
    1092:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <ili9341_spi_init>
    1096:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <ili9341_hard_reset>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	83 ed       	ldi	r24, 0xD3	; 211
    10a4:	90 e3       	ldi	r25, 0x30	; 48
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	80 40       	sbci	r24, 0x00	; 0
    10aa:	90 40       	sbci	r25, 0x00	; 0
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <ili9341_init+0x18>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <ili9341_init+0x22>
    10b0:	00 00       	nop
    10b2:	8b ec       	ldi	r24, 0xCB	; 203
    10b4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    10b8:	89 e3       	ldi	r24, 0x39	; 57
    10ba:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10be:	8c e2       	ldi	r24, 0x2C	; 44
    10c0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10ca:	84 e3       	ldi	r24, 0x34	; 52
    10cc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10d6:	8f ec       	ldi	r24, 0xCF	; 207
    10d8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10e2:	81 ec       	ldi	r24, 0xC1	; 193
    10e4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10e8:	80 e3       	ldi	r24, 0x30	; 48
    10ea:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10ee:	88 ee       	ldi	r24, 0xE8	; 232
    10f0:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    10f4:	85 e8       	ldi	r24, 0x85	; 133
    10f6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1100:	88 e7       	ldi	r24, 0x78	; 120
    1102:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1106:	8a ee       	ldi	r24, 0xEA	; 234
    1108:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1118:	8d ee       	ldi	r24, 0xED	; 237
    111a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    111e:	84 e6       	ldi	r24, 0x64	; 100
    1120:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    112a:	82 e1       	ldi	r24, 0x12	; 18
    112c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1130:	81 e8       	ldi	r24, 0x81	; 129
    1132:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1136:	87 ef       	ldi	r24, 0xF7	; 247
    1138:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1142:	80 ec       	ldi	r24, 0xC0	; 192
    1144:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    1148:	83 e2       	ldi	r24, 0x23	; 35
    114a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    114e:	81 ec       	ldi	r24, 0xC1	; 193
    1150:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    1154:	80 e1       	ldi	r24, 0x10	; 16
    1156:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    115a:	85 ec       	ldi	r24, 0xC5	; 197
    115c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    1160:	8e e3       	ldi	r24, 0x3E	; 62
    1162:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1166:	88 e2       	ldi	r24, 0x28	; 40
    1168:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    116c:	87 ec       	ldi	r24, 0xC7	; 199
    116e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    1172:	86 e8       	ldi	r24, 0x86	; 134
    1174:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1178:	86 e3       	ldi	r24, 0x36	; 54
    117a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    117e:	88 e4       	ldi	r24, 0x48	; 72
    1180:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1184:	8a e3       	ldi	r24, 0x3A	; 58
    1186:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    118a:	85 e5       	ldi	r24, 0x55	; 85
    118c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1190:	81 eb       	ldi	r24, 0xB1	; 177
    1192:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    119c:	88 e1       	ldi	r24, 0x18	; 24
    119e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11a2:	86 eb       	ldi	r24, 0xB6	; 182
    11a4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    11a8:	88 e0       	ldi	r24, 0x08	; 8
    11aa:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11ae:	82 e8       	ldi	r24, 0x82	; 130
    11b0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11b4:	87 e2       	ldi	r24, 0x27	; 39
    11b6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11ba:	82 ef       	ldi	r24, 0xF2	; 242
    11bc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11c6:	86 e2       	ldi	r24, 0x26	; 38
    11c8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11d2:	80 ee       	ldi	r24, 0xE0	; 224
    11d4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    11d8:	8f e0       	ldi	r24, 0x0F	; 15
    11da:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11de:	81 e3       	ldi	r24, 0x31	; 49
    11e0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11e4:	8b e2       	ldi	r24, 0x2B	; 43
    11e6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11ea:	8c e0       	ldi	r24, 0x0C	; 12
    11ec:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11f0:	8e e0       	ldi	r24, 0x0E	; 14
    11f2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11f6:	88 e0       	ldi	r24, 0x08	; 8
    11f8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    11fc:	8e e4       	ldi	r24, 0x4E	; 78
    11fe:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1202:	81 ef       	ldi	r24, 0xF1	; 241
    1204:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1208:	87 e3       	ldi	r24, 0x37	; 55
    120a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    120e:	87 e0       	ldi	r24, 0x07	; 7
    1210:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1214:	80 e1       	ldi	r24, 0x10	; 16
    1216:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1220:	8e e0       	ldi	r24, 0x0E	; 14
    1222:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1226:	89 e0       	ldi	r24, 0x09	; 9
    1228:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1232:	81 ee       	ldi	r24, 0xE1	; 225
    1234:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    123e:	8e e0       	ldi	r24, 0x0E	; 14
    1240:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1244:	84 e1       	ldi	r24, 0x14	; 20
    1246:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    124a:	83 e0       	ldi	r24, 0x03	; 3
    124c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1250:	81 e1       	ldi	r24, 0x11	; 17
    1252:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1256:	87 e0       	ldi	r24, 0x07	; 7
    1258:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    125c:	81 e3       	ldi	r24, 0x31	; 49
    125e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1262:	81 ec       	ldi	r24, 0xC1	; 193
    1264:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1268:	88 e4       	ldi	r24, 0x48	; 72
    126a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    126e:	88 e0       	ldi	r24, 0x08	; 8
    1270:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1274:	8f e0       	ldi	r24, 0x0F	; 15
    1276:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    127a:	8c e0       	ldi	r24, 0x0C	; 12
    127c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1280:	81 e3       	ldi	r24, 0x31	; 49
    1282:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1286:	86 e3       	ldi	r24, 0x36	; 54
    1288:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    128c:	8f e0       	ldi	r24, 0x0F	; 15
    128e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
    1292:	81 e1       	ldi	r24, 0x11	; 17
    1294:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    1298:	2f ef       	ldi	r18, 0xFF	; 255
    129a:	8b ed       	ldi	r24, 0xDB	; 219
    129c:	95 e0       	ldi	r25, 0x05	; 5
    129e:	21 50       	subi	r18, 0x01	; 1
    12a0:	80 40       	sbci	r24, 0x00	; 0
    12a2:	90 40       	sbci	r25, 0x00	; 0
    12a4:	e1 f7       	brne	.-8      	; 0x129e <ili9341_init+0x210>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <ili9341_init+0x21a>
    12a8:	00 00       	nop
    12aa:	89 e2       	ldi	r24, 0x29	; 41
    12ac:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
    12b0:	08 95       	ret

Disassembly of section .text.ili9341_pushcolour:

00001b2a <ili9341_pushcolour>:

}

//set colour for drawing
void ili9341_pushcolour(uint16_t colour)
{
    1b2a:	cf 93       	push	r28
    1b2c:	c8 2f       	mov	r28, r24
ili9341_writedata8(colour>>8);
    1b2e:	89 2f       	mov	r24, r25
    1b30:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
ili9341_writedata8(colour);
    1b34:	8c 2f       	mov	r24, r28
    1b36:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
}
    1b3a:	cf 91       	pop	r28
    1b3c:	08 95       	ret

Disassembly of section .text.ili9341_clear:

00001812 <ili9341_clear>:


//clear lcd and fill with colour
void ili9341_clear(uint16_t colour)
{
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	8c 01       	movw	r16, r24
uint16_t i,j;
ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);
    1820:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <LCD_H>
    1824:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <LCD_H+0x1>
    1828:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <LCD_W>
    182c:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <LCD_W+0x1>
    1830:	21 50       	subi	r18, 0x01	; 1
    1832:	31 09       	sbc	r19, r1
    1834:	41 50       	subi	r20, 0x01	; 1
    1836:	51 09       	sbc	r21, r1
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 44 0c 	call	0x1888	; 0x1888 <ili9341_setaddress>

for(i=0;i<LCD_W;i++)
    1844:	e1 2c       	mov	r14, r1
    1846:	f1 2c       	mov	r15, r1
    1848:	11 c0       	rjmp	.+34     	; 0x186c <ili9341_clear+0x5a>
{
for(j=0;j<LCD_H;j++)
{
ili9341_pushcolour(colour);
    184a:	c8 01       	movw	r24, r16
    184c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <ili9341_pushcolour>
uint16_t i,j;
ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);

for(i=0;i<LCD_W;i++)
{
for(j=0;j<LCD_H;j++)
    1850:	21 96       	adiw	r28, 0x01	; 1
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <ili9341_clear+0x46>
    1854:	c0 e0       	ldi	r28, 0x00	; 0
    1856:	d0 e0       	ldi	r29, 0x00	; 0
    1858:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <LCD_H>
    185c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <LCD_H+0x1>
    1860:	c8 17       	cp	r28, r24
    1862:	d9 07       	cpc	r29, r25
    1864:	90 f3       	brcs	.-28     	; 0x184a <ili9341_clear+0x38>
void ili9341_clear(uint16_t colour)
{
uint16_t i,j;
ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);

for(i=0;i<LCD_W;i++)
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	e8 1a       	sub	r14, r24
    186a:	f8 0a       	sbc	r15, r24
    186c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <LCD_W>
    1870:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <LCD_W+0x1>
    1874:	e8 16       	cp	r14, r24
    1876:	f9 06       	cpc	r15, r25
    1878:	68 f3       	brcs	.-38     	; 0x1854 <ili9341_clear+0x42>
{
ili9341_pushcolour(colour);
}
}

}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	08 95       	ret

Disassembly of section .text.ili9341_drawpixel:

00001940 <ili9341_drawpixel>:



//draw pixel
void ili9341_drawpixel(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
if((x3 < 0) ||(x3 >=LCD_W) || (y3 < 0) || (y3 >=LCD_H)) return;
    1944:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <LCD_W>
    1948:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <LCD_W+0x1>
    194c:	82 17       	cp	r24, r18
    194e:	93 07       	cpc	r25, r19
    1950:	98 f4       	brcc	.+38     	; 0x1978 <ili9341_drawpixel+0x38>
    1952:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <LCD_H>
    1956:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <LCD_H+0x1>
    195a:	62 17       	cp	r22, r18
    195c:	73 07       	cpc	r23, r19
    195e:	60 f4       	brcc	.+24     	; 0x1978 <ili9341_drawpixel+0x38>
    1960:	ea 01       	movw	r28, r20

ili9341_setaddress(x3,y3,x3+1,y3+1);
    1962:	9b 01       	movw	r18, r22
    1964:	2f 5f       	subi	r18, 0xFF	; 255
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	ac 01       	movw	r20, r24
    196a:	4f 5f       	subi	r20, 0xFF	; 255
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	0e 94 44 0c 	call	0x1888	; 0x1888 <ili9341_setaddress>

ili9341_pushcolour(colour1);
    1972:	ce 01       	movw	r24, r28
    1974:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <ili9341_pushcolour>
}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

Disassembly of section .text.ili9341_fillrect:

00001452 <ili9341_fillrect>:
}


//draw colour filled rectangle
void ili9341_fillrect(uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t colour)
{
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	6a 01       	movw	r12, r20
    1464:	79 01       	movw	r14, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
    1466:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <LCD_W>
    146a:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <LCD_W+0x1>
    146e:	82 17       	cp	r24, r18
    1470:	93 07       	cpc	r25, r19
    1472:	08 f0       	brcs	.+2      	; 0x1476 <ili9341_fillrect+0x24>
    1474:	47 c0       	rjmp	.+142    	; 0x1504 <ili9341_fillrect+0xb2>
    1476:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <LCD_H>
    147a:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <LCD_H+0x1>
    147e:	62 17       	cp	r22, r18
    1480:	73 07       	cpc	r23, r19
    1482:	08 f0       	brcs	.+2      	; 0x1486 <ili9341_fillrect+0x34>
    1484:	3f c0       	rjmp	.+126    	; 0x1504 <ili9341_fillrect+0xb2>
if((x+w-1)>=LCD_W)
    1486:	9c 01       	movw	r18, r24
    1488:	24 0f       	add	r18, r20
    148a:	35 1f       	adc	r19, r21
    148c:	21 50       	subi	r18, 0x01	; 1
    148e:	31 09       	sbc	r19, r1
    1490:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <LCD_W>
    1494:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <LCD_W+0x1>
    1498:	24 17       	cp	r18, r20
    149a:	35 07       	cpc	r19, r21
    149c:	30 f0       	brcs	.+12     	; 0x14aa <ili9341_fillrect+0x58>
w=LCD_W-x;
    149e:	c0 90 3f 01 	lds	r12, 0x013F	; 0x80013f <LCD_W>
    14a2:	d0 90 40 01 	lds	r13, 0x0140	; 0x800140 <LCD_W+0x1>
    14a6:	c8 1a       	sub	r12, r24
    14a8:	d9 0a       	sbc	r13, r25
if((y+h-1)>=LCD_H)
    14aa:	9b 01       	movw	r18, r22
    14ac:	2e 0d       	add	r18, r14
    14ae:	3f 1d       	adc	r19, r15
    14b0:	21 50       	subi	r18, 0x01	; 1
    14b2:	31 09       	sbc	r19, r1
    14b4:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <LCD_H>
    14b8:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <LCD_H+0x1>
    14bc:	24 17       	cp	r18, r20
    14be:	35 07       	cpc	r19, r21
    14c0:	30 f0       	brcs	.+12     	; 0x14ce <ili9341_fillrect+0x7c>
h=LCD_H-y;
    14c2:	e0 90 3d 01 	lds	r14, 0x013D	; 0x80013d <LCD_H>
    14c6:	f0 90 3e 01 	lds	r15, 0x013E	; 0x80013e <LCD_H+0x1>
    14ca:	e6 1a       	sub	r14, r22
    14cc:	f7 0a       	sbc	r15, r23

ili9341_setaddress(x, y, x+w-1, y+h-1);
    14ce:	97 01       	movw	r18, r14
    14d0:	26 0f       	add	r18, r22
    14d2:	37 1f       	adc	r19, r23
    14d4:	a6 01       	movw	r20, r12
    14d6:	48 0f       	add	r20, r24
    14d8:	59 1f       	adc	r21, r25
    14da:	21 50       	subi	r18, 0x01	; 1
    14dc:	31 09       	sbc	r19, r1
    14de:	41 50       	subi	r20, 0x01	; 1
    14e0:	51 09       	sbc	r21, r1
    14e2:	0e 94 44 0c 	call	0x1888	; 0x1888 <ili9341_setaddress>

for(y=h; y>0; y--) 
    14e6:	0b c0       	rjmp	.+22     	; 0x14fe <ili9341_fillrect+0xac>
{
for(x=w; x>0; x--)
{
ili9341_pushcolour(colour);
    14e8:	c8 01       	movw	r24, r16
    14ea:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <ili9341_pushcolour>

ili9341_setaddress(x, y, x+w-1, y+h-1);

for(y=h; y>0; y--) 
{
for(x=w; x>0; x--)
    14ee:	21 97       	sbiw	r28, 0x01	; 1
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <ili9341_fillrect+0xa2>
    14f2:	e6 01       	movw	r28, r12
    14f4:	20 97       	sbiw	r28, 0x00	; 0
    14f6:	c1 f7       	brne	.-16     	; 0x14e8 <ili9341_fillrect+0x96>
if((y+h-1)>=LCD_H)
h=LCD_H-y;

ili9341_setaddress(x, y, x+w-1, y+h-1);

for(y=h; y>0; y--) 
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	e8 1a       	sub	r14, r24
    14fc:	f1 08       	sbc	r15, r1
    14fe:	e1 14       	cp	r14, r1
    1500:	f1 04       	cpc	r15, r1
    1502:	b9 f7       	brne	.-18     	; 0x14f2 <ili9341_fillrect+0xa0>
for(x=w; x>0; x--)
{
ili9341_pushcolour(colour);
}
}
}
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	08 95       	ret

Disassembly of section .text.ili9341_setRotation:

000015d2 <ili9341_setRotation>:
//rotate screen at desired orientation
void ili9341_setRotation(uint8_t m) 
{
    15d2:	cf 93       	push	r28
    15d4:	c8 2f       	mov	r28, r24
uint8_t rotation;
ili9341_writecommand8(0x36);
    15d6:	86 e3       	ldi	r24, 0x36	; 54
    15d8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ili9341_writecommand8>
rotation=m%4;
    15dc:	8c 2f       	mov	r24, r28
    15de:	83 70       	andi	r24, 0x03	; 3
switch (rotation) 
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	b1 f0       	breq	.+44     	; 0x1610 <ili9341_setRotation+0x3e>
    15e4:	28 f0       	brcs	.+10     	; 0x15f0 <ili9341_setRotation+0x1e>
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	19 f1       	breq	.+70     	; 0x1630 <ili9341_setRotation+0x5e>
    15ea:	83 30       	cpi	r24, 0x03	; 3
    15ec:	89 f1       	breq	.+98     	; 0x1650 <ili9341_setRotation+0x7e>
    15ee:	3f c0       	rjmp	.+126    	; 0x166e <ili9341_setRotation+0x9c>
{
case 0:
ili9341_writedata8(0x40|0x08);
    15f0:	88 e4       	ldi	r24, 0x48	; 72
    15f2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
LCD_W = 240;
    15f6:	80 ef       	ldi	r24, 0xF0	; 240
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <LCD_W+0x1>
    15fe:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <LCD_W>
LCD_H = 320;
    1602:	80 e4       	ldi	r24, 0x40	; 64
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <LCD_H+0x1>
    160a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <LCD_H>
break;
    160e:	2f c0       	rjmp	.+94     	; 0x166e <ili9341_setRotation+0x9c>
case 1:
ili9341_writedata8(0x20|0x08);
    1610:	88 e2       	ldi	r24, 0x28	; 40
    1612:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
LCD_W  = 320;
    1616:	80 e4       	ldi	r24, 0x40	; 64
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <LCD_W+0x1>
    161e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <LCD_W>
LCD_H = 240;
    1622:	80 ef       	ldi	r24, 0xF0	; 240
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <LCD_H+0x1>
    162a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <LCD_H>
break;
    162e:	1f c0       	rjmp	.+62     	; 0x166e <ili9341_setRotation+0x9c>
case 2:
ili9341_writedata8(0x80|0x08);
    1630:	88 e8       	ldi	r24, 0x88	; 136
    1632:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
LCD_W  = 240;
    1636:	80 ef       	ldi	r24, 0xF0	; 240
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <LCD_W+0x1>
    163e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <LCD_W>
LCD_H = 320;
    1642:	80 e4       	ldi	r24, 0x40	; 64
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <LCD_H+0x1>
    164a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <LCD_H>
break;
    164e:	0f c0       	rjmp	.+30     	; 0x166e <ili9341_setRotation+0x9c>
case 3:
ili9341_writedata8(0x40|0x80|0x20|0x08);
    1650:	88 ee       	ldi	r24, 0xE8	; 232
    1652:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ili9341_writedata8>
LCD_W  = 320;
    1656:	80 e4       	ldi	r24, 0x40	; 64
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <LCD_W+0x1>
    165e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <LCD_W>
LCD_H = 240;
    1662:	80 ef       	ldi	r24, 0xF0	; 240
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <LCD_H+0x1>
    166a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <LCD_H>
break;
}
}
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

Disassembly of section .text.main:

00000e1c <main>:
extern uint16_t vsetx,vsety,vactualx,vactualy,isetx,isety,iactualx,iactualy;
static FILE mydata = FDEV_SETUP_STREAM(ili9341_putchar_printf, NULL, _FDEV_SETUP_WRITE);

int main(void)
{
stdout = & mydata;
     e1c:	8e e2       	ldi	r24, 0x2E	; 46
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <__iob+0x3>
     e24:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <__iob+0x2>
ili9341_init();//initial driver setup to drive ili9341
     e28:	0e 94 47 08 	call	0x108e	; 0x108e <ili9341_init>
ili9341_clear(BLACK);//fill screen with black colour
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 09 0c 	call	0x1812	; 0x1812 <ili9341_clear>
     e34:	2f e3       	ldi	r18, 0x3F	; 63
     e36:	8d e0       	ldi	r24, 0x0D	; 13
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	80 40       	sbci	r24, 0x00	; 0
     e3e:	90 40       	sbci	r25, 0x00	; 0
     e40:	e1 f7       	brne	.-8      	; 0xe3a <main+0x1e>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <main+0x28>
     e44:	00 00       	nop
_delay_ms(1000);
ili9341_setRotation(3);//rotate screen
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <ili9341_setRotation>
     e4c:	83 ef       	ldi	r24, 0xF3	; 243
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <main+0x34>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <main+0x3a>
     e56:	00 00       	nop
_delay_ms(2);

display_init();//display initial data
     e58:	0e 94 26 05 	call	0xa4c	; 0xa4c <display_init>


while(1)
{
ili9341_settextcolour(CYAN,BLACK);
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	97 e0       	ldi	r25, 0x07	; 7
     e64:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <ili9341_settextcolour>

ili9341_setcursor(vsetx,vsety);
     e68:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <vsety>
     e6c:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <vsety+0x1>
     e70:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <vsetx>
     e74:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <vsetx+0x1>
     e78:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
     e7c:	83 ef       	ldi	r24, 0xF3	; 243
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <main+0x64>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <main+0x6a>
     e86:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(3);
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
ili9341_write('1');
     e8e:	81 e3       	ldi	r24, 0x31	; 49
     e90:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     e94:	83 ef       	ldi	r24, 0xF3	; 243
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <main+0x7c>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <main+0x82>
     e9e:	00 00       	nop
_delay_ms(2);
ili9341_write('0');
     ea0:	80 e3       	ldi	r24, 0x30	; 48
     ea2:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     ea6:	83 ef       	ldi	r24, 0xF3	; 243
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <main+0x8e>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <main+0x94>
     eb0:	00 00       	nop
_delay_ms(2);
ili9341_write('.');
     eb2:	8e e2       	ldi	r24, 0x2E	; 46
     eb4:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     eb8:	83 ef       	ldi	r24, 0xF3	; 243
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <main+0xa0>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <main+0xa6>
     ec2:	00 00       	nop
_delay_ms(2);
ili9341_write('2');
     ec4:	82 e3       	ldi	r24, 0x32	; 50
     ec6:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     eca:	83 ef       	ldi	r24, 0xF3	; 243
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <main+0xb2>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <main+0xb8>
     ed4:	00 00       	nop
_delay_ms(2);
ili9341_write('3');
     ed6:	83 e3       	ldi	r24, 0x33	; 51
     ed8:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     edc:	83 ef       	ldi	r24, 0xF3	; 243
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <main+0xc4>
     ee4:	00 c0       	rjmp	.+0      	; 0xee6 <main+0xca>
     ee6:	00 00       	nop
_delay_ms(2);



ili9341_setcursor(vactualx,vactualy);
     ee8:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <vactualy>
     eec:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <vactualy+0x1>
     ef0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vactualx>
     ef4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <vactualx+0x1>
     ef8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
     efc:	83 ef       	ldi	r24, 0xF3	; 243
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <main+0xe4>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <main+0xea>
     f06:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(5);
     f08:	85 e0       	ldi	r24, 0x05	; 5
     f0a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
ili9341_write('1');
     f0e:	81 e3       	ldi	r24, 0x31	; 49
     f10:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     f14:	83 ef       	ldi	r24, 0xF3	; 243
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <main+0xfc>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <main+0x102>
     f1e:	00 00       	nop
_delay_ms(2);
ili9341_write('0');
     f20:	80 e3       	ldi	r24, 0x30	; 48
     f22:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     f26:	83 ef       	ldi	r24, 0xF3	; 243
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <main+0x10e>
     f2e:	00 c0       	rjmp	.+0      	; 0xf30 <main+0x114>
     f30:	00 00       	nop
_delay_ms(2);
ili9341_write('.');
     f32:	8e e2       	ldi	r24, 0x2E	; 46
     f34:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     f38:	83 ef       	ldi	r24, 0xF3	; 243
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <main+0x120>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <main+0x126>
     f42:	00 00       	nop
_delay_ms(2);
ili9341_write('2');
     f44:	82 e3       	ldi	r24, 0x32	; 50
     f46:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     f4a:	83 ef       	ldi	r24, 0xF3	; 243
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <main+0x132>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <main+0x138>
     f54:	00 00       	nop
_delay_ms(2);
ili9341_write('3');
     f56:	83 e3       	ldi	r24, 0x33	; 51
     f58:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     f5c:	83 ef       	ldi	r24, 0xF3	; 243
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x144>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <main+0x14a>
     f66:	00 00       	nop
     f68:	9f e7       	ldi	r25, 0x7F	; 127
     f6a:	2a e1       	ldi	r18, 0x1A	; 26
     f6c:	86 e0       	ldi	r24, 0x06	; 6
     f6e:	91 50       	subi	r25, 0x01	; 1
     f70:	20 40       	sbci	r18, 0x00	; 0
     f72:	80 40       	sbci	r24, 0x00	; 0
     f74:	e1 f7       	brne	.-8      	; 0xf6e <main+0x152>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <main+0x15c>
     f78:	00 00       	nop
_delay_ms(2);

_delay_ms(2000);

ili9341_setcursor(vsetx,vsety);
     f7a:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <vsety>
     f7e:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <vsety+0x1>
     f82:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <vsetx>
     f86:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <vsetx+0x1>
     f8a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
     f8e:	83 ef       	ldi	r24, 0xF3	; 243
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <main+0x176>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <main+0x17c>
     f98:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(3);
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
ili9341_write('9');
     fa0:	89 e3       	ldi	r24, 0x39	; 57
     fa2:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     fa6:	83 ef       	ldi	r24, 0xF3	; 243
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <main+0x18e>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <main+0x194>
     fb0:	00 00       	nop
_delay_ms(2);
ili9341_write('0');
     fb2:	80 e3       	ldi	r24, 0x30	; 48
     fb4:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     fb8:	83 ef       	ldi	r24, 0xF3	; 243
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <main+0x1a0>
     fc0:	00 c0       	rjmp	.+0      	; 0xfc2 <main+0x1a6>
     fc2:	00 00       	nop
_delay_ms(2);
ili9341_write('.');
     fc4:	8e e2       	ldi	r24, 0x2E	; 46
     fc6:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     fca:	83 ef       	ldi	r24, 0xF3	; 243
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <main+0x1b2>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <main+0x1b8>
     fd4:	00 00       	nop
_delay_ms(2);
ili9341_write('4');
     fd6:	84 e3       	ldi	r24, 0x34	; 52
     fd8:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     fdc:	83 ef       	ldi	r24, 0xF3	; 243
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <main+0x1c4>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <main+0x1ca>
     fe6:	00 00       	nop
_delay_ms(2);
ili9341_write('5');
     fe8:	85 e3       	ldi	r24, 0x35	; 53
     fea:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
     fee:	83 ef       	ldi	r24, 0xF3	; 243
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <main+0x1d6>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <main+0x1dc>
     ff8:	00 00       	nop
_delay_ms(2);

ili9341_setcursor(vactualx,vactualy);
     ffa:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <vactualy>
     ffe:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <vactualy+0x1>
    1002:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vactualx>
    1006:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <vactualx+0x1>
    100a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <ili9341_setcursor>
    100e:	83 ef       	ldi	r24, 0xF3	; 243
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <main+0x1f6>
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <main+0x1fc>
    1018:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(5);
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <ili9341_settextsize>
ili9341_write('9');
    1020:	89 e3       	ldi	r24, 0x39	; 57
    1022:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
    1026:	83 ef       	ldi	r24, 0xF3	; 243
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <main+0x20e>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <main+0x214>
    1030:	00 00       	nop
_delay_ms(2);
ili9341_write('0');
    1032:	80 e3       	ldi	r24, 0x30	; 48
    1034:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
    1038:	83 ef       	ldi	r24, 0xF3	; 243
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <main+0x220>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <main+0x226>
    1042:	00 00       	nop
_delay_ms(2);
ili9341_write('.');
    1044:	8e e2       	ldi	r24, 0x2E	; 46
    1046:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
    104a:	83 ef       	ldi	r24, 0xF3	; 243
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <main+0x232>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <main+0x238>
    1054:	00 00       	nop
_delay_ms(2);
ili9341_write('4');
    1056:	84 e3       	ldi	r24, 0x34	; 52
    1058:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
    105c:	83 ef       	ldi	r24, 0xF3	; 243
    105e:	91 e0       	ldi	r25, 0x01	; 1
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <main+0x244>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <main+0x24a>
    1066:	00 00       	nop
_delay_ms(2);
ili9341_write('5');
    1068:	85 e3       	ldi	r24, 0x35	; 53
    106a:	0e 94 39 0b 	call	0x1672	; 0x1672 <ili9341_write>
    106e:	83 ef       	ldi	r24, 0xF3	; 243
    1070:	91 e0       	ldi	r25, 0x01	; 1
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <main+0x256>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <main+0x25c>
    1078:	00 00       	nop
    107a:	9f e7       	ldi	r25, 0x7F	; 127
    107c:	2a e1       	ldi	r18, 0x1A	; 26
    107e:	86 e0       	ldi	r24, 0x06	; 6
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	20 40       	sbci	r18, 0x00	; 0
    1084:	80 40       	sbci	r24, 0x00	; 0
    1086:	e1 f7       	brne	.-8      	; 0x1080 <main+0x264>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <main+0x26e>
    108a:	00 00       	nop
    108c:	e7 ce       	rjmp	.-562    	; 0xe5c <main+0x40>

Disassembly of section .text.avrlibc:

00001a22 <printf>:
    1a22:	a0 e0       	ldi	r26, 0x00	; 0
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e7 e1       	ldi	r30, 0x17	; 23
    1a28:	fd e0       	ldi	r31, 0x0D	; 13
    1a2a:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__prologue_saves__+0x20>
    1a2e:	9e 01       	movw	r18, r28
    1a30:	2b 5f       	subi	r18, 0xFB	; 251
    1a32:	3f 4f       	sbci	r19, 0xFF	; 255
    1a34:	f9 01       	movw	r30, r18
    1a36:	41 91       	ld	r20, Z+
    1a38:	51 91       	ld	r21, Z+
    1a3a:	61 91       	ld	r22, Z+
    1a3c:	9f 01       	movw	r18, r30
    1a3e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__iob+0x2>
    1a42:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <__iob+0x3>
    1a46:	0e 94 02 03 	call	0x604	; 0x604 <vfprintf>
    1a4a:	e2 e0       	ldi	r30, 0x02	; 2
    1a4c:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__epilogue_restores__+0x20>

Disassembly of section .text.avrlibc:

0000170a <puts>:
    170a:	cf 92       	push	r12
    170c:	df 92       	push	r13
    170e:	ef 92       	push	r14
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <__iob+0x2>
    171c:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <__iob+0x3>
    1720:	94 81       	ldd	r25, Z+4	; 0x04
    1722:	91 ff       	sbrs	r25, 1
    1724:	2d c0       	rjmp	.+90     	; 0x1780 <puts+0x76>
    1726:	6b 01       	movw	r12, r22
    1728:	e8 2e       	mov	r14, r24
    172a:	d0 e0       	ldi	r29, 0x00	; 0
    172c:	c0 e0       	ldi	r28, 0x00	; 0
    172e:	09 e1       	ldi	r16, 0x19	; 25
    1730:	11 e0       	ldi	r17, 0x01	; 1
    1732:	f6 01       	movw	r30, r12
    1734:	84 91       	lpm	r24, Z
    1736:	e7 fc       	sbrc	r14, 7
    1738:	80 81       	ld	r24, Z
    173a:	88 23       	and	r24, r24
    173c:	a1 f0       	breq	.+40     	; 0x1766 <puts+0x5c>
    173e:	d8 01       	movw	r26, r16
    1740:	12 96       	adiw	r26, 0x02	; 2
    1742:	6d 91       	ld	r22, X+
    1744:	7c 91       	ld	r23, X
    1746:	13 97       	sbiw	r26, 0x03	; 3
    1748:	db 01       	movw	r26, r22
    174a:	19 96       	adiw	r26, 0x09	; 9
    174c:	ed 91       	ld	r30, X+
    174e:	fc 91       	ld	r31, X
    1750:	1a 97       	sbiw	r26, 0x0a	; 10
    1752:	09 95       	icall
    1754:	89 2b       	or	r24, r25
    1756:	11 f0       	breq	.+4      	; 0x175c <puts+0x52>
    1758:	df ef       	ldi	r29, 0xFF	; 255
    175a:	cf ef       	ldi	r28, 0xFF	; 255
    175c:	bf ef       	ldi	r27, 0xFF	; 255
    175e:	cb 1a       	sub	r12, r27
    1760:	db 0a       	sbc	r13, r27
    1762:	eb 0a       	sbc	r14, r27
    1764:	e6 cf       	rjmp	.-52     	; 0x1732 <puts+0x28>
    1766:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <__iob+0x2>
    176a:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <__iob+0x3>
    176e:	db 01       	movw	r26, r22
    1770:	19 96       	adiw	r26, 0x09	; 9
    1772:	ed 91       	ld	r30, X+
    1774:	fc 91       	ld	r31, X
    1776:	1a 97       	sbiw	r26, 0x0a	; 10
    1778:	8a e0       	ldi	r24, 0x0A	; 10
    177a:	09 95       	icall
    177c:	89 2b       	or	r24, r25
    177e:	19 f0       	breq	.+6      	; 0x1786 <puts+0x7c>
    1780:	8f ef       	ldi	r24, 0xFF	; 255
    1782:	9f ef       	ldi	r25, 0xFF	; 255
    1784:	02 c0       	rjmp	.+4      	; 0x178a <puts+0x80>
    1786:	8d 2f       	mov	r24, r29
    1788:	9c 2f       	mov	r25, r28
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	cf 90       	pop	r12
    1798:	08 95       	ret

Disassembly of section .text.avrlibc:

00000604 <vfprintf>:
 604:	2f 92       	push	r2
 606:	3f 92       	push	r3
 608:	4f 92       	push	r4
 60a:	6f 92       	push	r6
 60c:	7f 92       	push	r7
 60e:	8f 92       	push	r8
 610:	9f 92       	push	r9
 612:	af 92       	push	r10
 614:	bf 92       	push	r11
 616:	cf 92       	push	r12
 618:	df 92       	push	r13
 61a:	ef 92       	push	r14
 61c:	ff 92       	push	r15
 61e:	0f 93       	push	r16
 620:	1f 93       	push	r17
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
 62a:	62 97       	sbiw	r28, 0x12	; 18
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	f8 94       	cli
 630:	de bf       	out	0x3e, r29	; 62
 632:	0f be       	out	0x3f, r0	; 63
 634:	cd bf       	out	0x3d, r28	; 61
 636:	6c 01       	movw	r12, r24
 638:	3a 01       	movw	r6, r20
 63a:	86 2e       	mov	r8, r22
 63c:	79 01       	movw	r14, r18
 63e:	fc 01       	movw	r30, r24
 640:	10 86       	std	Z+8, r1	; 0x08
 642:	17 82       	std	Z+7, r1	; 0x07
 644:	84 81       	ldd	r24, Z+4	; 0x04
 646:	81 ff       	sbrs	r24, 1
 648:	e7 c1       	rjmp	.+974    	; 0xa18 <__stack+0x119>
 64a:	9e 01       	movw	r18, r28
 64c:	2f 5f       	subi	r18, 0xFF	; 255
 64e:	3f 4f       	sbci	r19, 0xFF	; 255
 650:	3d 87       	std	Y+13, r19	; 0x0d
 652:	2c 87       	std	Y+12, r18	; 0x0c
 654:	c9 01       	movw	r24, r18
 656:	a0 e8       	ldi	r26, 0x80	; 128
 658:	88 8b       	std	Y+16, r24	; 0x10
 65a:	99 8b       	std	Y+17, r25	; 0x11
 65c:	aa 8b       	std	Y+18, r26	; 0x12
 65e:	9f e3       	ldi	r25, 0x3F	; 63
 660:	99 2e       	mov	r9, r25
 662:	f3 01       	movw	r30, r6
 664:	84 91       	lpm	r24, Z
 666:	87 fc       	sbrc	r8, 7
 668:	80 81       	ld	r24, Z
 66a:	88 23       	and	r24, r24
 66c:	09 f4       	brne	.+2      	; 0x670 <vfprintf+0x6c>
 66e:	d0 c1       	rjmp	.+928    	; 0xa10 <__stack+0x111>
 670:	48 2d       	mov	r20, r8
 672:	93 01       	movw	r18, r6
 674:	2f 5f       	subi	r18, 0xFF	; 255
 676:	3f 4f       	sbci	r19, 0xFF	; 255
 678:	4f 4f       	sbci	r20, 0xFF	; 255
 67a:	85 32       	cpi	r24, 0x25	; 37
 67c:	19 f0       	breq	.+6      	; 0x684 <vfprintf+0x80>
 67e:	39 01       	movw	r6, r18
 680:	84 2e       	mov	r8, r20
 682:	0a c0       	rjmp	.+20     	; 0x698 <vfprintf+0x94>
 684:	f9 01       	movw	r30, r18
 686:	84 91       	lpm	r24, Z
 688:	47 fd       	sbrc	r20, 7
 68a:	80 81       	ld	r24, Z
 68c:	92 e0       	ldi	r25, 0x02	; 2
 68e:	69 0e       	add	r6, r25
 690:	71 1c       	adc	r7, r1
 692:	81 1c       	adc	r8, r1
 694:	85 32       	cpi	r24, 0x25	; 37
 696:	29 f4       	brne	.+10     	; 0x6a2 <vfprintf+0x9e>
 698:	b6 01       	movw	r22, r12
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 6a0:	e0 cf       	rjmp	.-64     	; 0x662 <vfprintf+0x5e>
 6a2:	b1 2c       	mov	r11, r1
 6a4:	00 e0       	ldi	r16, 0x00	; 0
 6a6:	10 e0       	ldi	r17, 0x00	; 0
 6a8:	10 32       	cpi	r17, 0x20	; 32
 6aa:	a0 f4       	brcc	.+40     	; 0x6d4 <vfprintf+0xd0>
 6ac:	8b 32       	cpi	r24, 0x2B	; 43
 6ae:	69 f0       	breq	.+26     	; 0x6ca <vfprintf+0xc6>
 6b0:	30 f4       	brcc	.+12     	; 0x6be <vfprintf+0xba>
 6b2:	80 32       	cpi	r24, 0x20	; 32
 6b4:	59 f0       	breq	.+22     	; 0x6cc <vfprintf+0xc8>
 6b6:	83 32       	cpi	r24, 0x23	; 35
 6b8:	69 f4       	brne	.+26     	; 0x6d4 <vfprintf+0xd0>
 6ba:	10 61       	ori	r17, 0x10	; 16
 6bc:	2c c0       	rjmp	.+88     	; 0x716 <vfprintf+0x112>
 6be:	8d 32       	cpi	r24, 0x2D	; 45
 6c0:	39 f0       	breq	.+14     	; 0x6d0 <vfprintf+0xcc>
 6c2:	80 33       	cpi	r24, 0x30	; 48
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <vfprintf+0xd0>
 6c6:	11 60       	ori	r17, 0x01	; 1
 6c8:	26 c0       	rjmp	.+76     	; 0x716 <vfprintf+0x112>
 6ca:	12 60       	ori	r17, 0x02	; 2
 6cc:	14 60       	ori	r17, 0x04	; 4
 6ce:	23 c0       	rjmp	.+70     	; 0x716 <vfprintf+0x112>
 6d0:	18 60       	ori	r17, 0x08	; 8
 6d2:	21 c0       	rjmp	.+66     	; 0x716 <vfprintf+0x112>
 6d4:	17 fd       	sbrc	r17, 7
 6d6:	29 c0       	rjmp	.+82     	; 0x72a <vfprintf+0x126>
 6d8:	90 ed       	ldi	r25, 0xD0	; 208
 6da:	98 0f       	add	r25, r24
 6dc:	9a 30       	cpi	r25, 0x0A	; 10
 6de:	78 f4       	brcc	.+30     	; 0x6fe <vfprintf+0xfa>
 6e0:	16 ff       	sbrs	r17, 6
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <vfprintf+0xec>
 6e4:	aa e0       	ldi	r26, 0x0A	; 10
 6e6:	ba 9e       	mul	r11, r26
 6e8:	90 0d       	add	r25, r0
 6ea:	11 24       	eor	r1, r1
 6ec:	b9 2e       	mov	r11, r25
 6ee:	13 c0       	rjmp	.+38     	; 0x716 <vfprintf+0x112>
 6f0:	ea e0       	ldi	r30, 0x0A	; 10
 6f2:	0e 9f       	mul	r16, r30
 6f4:	90 0d       	add	r25, r0
 6f6:	11 24       	eor	r1, r1
 6f8:	09 2f       	mov	r16, r25
 6fa:	10 62       	ori	r17, 0x20	; 32
 6fc:	0c c0       	rjmp	.+24     	; 0x716 <vfprintf+0x112>
 6fe:	8e 32       	cpi	r24, 0x2E	; 46
 700:	21 f4       	brne	.+8      	; 0x70a <vfprintf+0x106>
 702:	16 fd       	sbrc	r17, 6
 704:	85 c1       	rjmp	.+778    	; 0xa10 <__stack+0x111>
 706:	10 64       	ori	r17, 0x40	; 64
 708:	06 c0       	rjmp	.+12     	; 0x716 <vfprintf+0x112>
 70a:	8c 36       	cpi	r24, 0x6C	; 108
 70c:	11 f4       	brne	.+4      	; 0x712 <vfprintf+0x10e>
 70e:	10 68       	ori	r17, 0x80	; 128
 710:	02 c0       	rjmp	.+4      	; 0x716 <vfprintf+0x112>
 712:	88 36       	cpi	r24, 0x68	; 104
 714:	51 f4       	brne	.+20     	; 0x72a <vfprintf+0x126>
 716:	f3 01       	movw	r30, r6
 718:	84 91       	lpm	r24, Z
 71a:	87 fc       	sbrc	r8, 7
 71c:	80 81       	ld	r24, Z
 71e:	ff ef       	ldi	r31, 0xFF	; 255
 720:	6f 1a       	sub	r6, r31
 722:	7f 0a       	sbc	r7, r31
 724:	8f 0a       	sbc	r8, r31
 726:	81 11       	cpse	r24, r1
 728:	bf cf       	rjmp	.-130    	; 0x6a8 <vfprintf+0xa4>
 72a:	98 2f       	mov	r25, r24
 72c:	9f 7d       	andi	r25, 0xDF	; 223
 72e:	95 54       	subi	r25, 0x45	; 69
 730:	93 30       	cpi	r25, 0x03	; 3
 732:	28 f4       	brcc	.+10     	; 0x73e <vfprintf+0x13a>
 734:	24 e0       	ldi	r18, 0x04	; 4
 736:	e2 0e       	add	r14, r18
 738:	f1 1c       	adc	r15, r1
 73a:	99 82       	std	Y+1, r9	; 0x01
 73c:	0f c0       	rjmp	.+30     	; 0x75c <vfprintf+0x158>
 73e:	83 36       	cpi	r24, 0x63	; 99
 740:	31 f0       	breq	.+12     	; 0x74e <vfprintf+0x14a>
 742:	83 37       	cpi	r24, 0x73	; 115
 744:	91 f0       	breq	.+36     	; 0x76a <vfprintf+0x166>
 746:	83 35       	cpi	r24, 0x53	; 83
 748:	09 f0       	breq	.+2      	; 0x74c <vfprintf+0x148>
 74a:	63 c0       	rjmp	.+198    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 74c:	27 c0       	rjmp	.+78     	; 0x79c <vfprintf+0x198>
 74e:	f7 01       	movw	r30, r14
 750:	80 81       	ld	r24, Z
 752:	89 83       	std	Y+1, r24	; 0x01
 754:	97 01       	movw	r18, r14
 756:	2e 5f       	subi	r18, 0xFE	; 254
 758:	3f 4f       	sbci	r19, 0xFF	; 255
 75a:	79 01       	movw	r14, r18
 75c:	28 88       	ldd	r2, Y+16	; 0x10
 75e:	39 88       	ldd	r3, Y+17	; 0x11
 760:	4a 88       	ldd	r4, Y+18	; 0x12
 762:	aa 24       	eor	r10, r10
 764:	a3 94       	inc	r10
 766:	b1 2c       	mov	r11, r1
 768:	17 c0       	rjmp	.+46     	; 0x798 <vfprintf+0x194>
 76a:	a7 01       	movw	r20, r14
 76c:	4d 5f       	subi	r20, 0xFD	; 253
 76e:	5f 4f       	sbci	r21, 0xFF	; 255
 770:	5f 87       	std	Y+15, r21	; 0x0f
 772:	4e 87       	std	Y+14, r20	; 0x0e
 774:	f7 01       	movw	r30, r14
 776:	20 80       	ld	r2, Z
 778:	31 80       	ldd	r3, Z+1	; 0x01
 77a:	42 80       	ldd	r4, Z+2	; 0x02
 77c:	16 ff       	sbrs	r17, 6
 77e:	03 c0       	rjmp	.+6      	; 0x786 <vfprintf+0x182>
 780:	4b 2d       	mov	r20, r11
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x186>
 786:	4f ef       	ldi	r20, 0xFF	; 255
 788:	5f ef       	ldi	r21, 0xFF	; 255
 78a:	84 2d       	mov	r24, r4
 78c:	b1 01       	movw	r22, r2
 78e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <strnlen>
 792:	5c 01       	movw	r10, r24
 794:	ee 84       	ldd	r14, Y+14	; 0x0e
 796:	ff 84       	ldd	r15, Y+15	; 0x0f
 798:	1f 77       	andi	r17, 0x7F	; 127
 79a:	18 c0       	rjmp	.+48     	; 0x7cc <vfprintf+0x1c8>
 79c:	97 01       	movw	r18, r14
 79e:	2d 5f       	subi	r18, 0xFD	; 253
 7a0:	3f 4f       	sbci	r19, 0xFF	; 255
 7a2:	3f 87       	std	Y+15, r19	; 0x0f
 7a4:	2e 87       	std	Y+14, r18	; 0x0e
 7a6:	f7 01       	movw	r30, r14
 7a8:	20 80       	ld	r2, Z
 7aa:	31 80       	ldd	r3, Z+1	; 0x01
 7ac:	42 80       	ldd	r4, Z+2	; 0x02
 7ae:	16 ff       	sbrs	r17, 6
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <vfprintf+0x1b4>
 7b2:	4b 2d       	mov	r20, r11
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x1b8>
 7b8:	4f ef       	ldi	r20, 0xFF	; 255
 7ba:	5f ef       	ldi	r21, 0xFF	; 255
 7bc:	84 2d       	mov	r24, r4
 7be:	b1 01       	movw	r22, r2
 7c0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <strnlen>
 7c4:	5c 01       	movw	r10, r24
 7c6:	10 68       	ori	r17, 0x80	; 128
 7c8:	ee 84       	ldd	r14, Y+14	; 0x0e
 7ca:	ff 84       	ldd	r15, Y+15	; 0x0f
 7cc:	13 fd       	sbrc	r17, 3
 7ce:	1d c0       	rjmp	.+58     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7d0:	80 2f       	mov	r24, r16
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	a8 16       	cp	r10, r24
 7d6:	b9 06       	cpc	r11, r25
 7d8:	c0 f4       	brcc	.+48     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7da:	b6 01       	movw	r22, r12
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 7e4:	01 50       	subi	r16, 0x01	; 1
 7e6:	f4 cf       	rjmp	.-24     	; 0x7d0 <vfprintf+0x1cc>
 7e8:	f1 01       	movw	r30, r2
 7ea:	84 91       	lpm	r24, Z
 7ec:	47 fc       	sbrc	r4, 7
 7ee:	80 81       	ld	r24, Z
 7f0:	ff ef       	ldi	r31, 0xFF	; 255
 7f2:	2f 1a       	sub	r2, r31
 7f4:	3f 0a       	sbc	r3, r31
 7f6:	4f 0a       	sbc	r4, r31
 7f8:	b6 01       	movw	r22, r12
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 800:	01 11       	cpse	r16, r1
 802:	01 50       	subi	r16, 0x01	; 1
 804:	21 e0       	ldi	r18, 0x01	; 1
 806:	a2 1a       	sub	r10, r18
 808:	b1 08       	sbc	r11, r1
 80a:	a1 14       	cp	r10, r1
 80c:	b1 04       	cpc	r11, r1
 80e:	61 f7       	brne	.-40     	; 0x7e8 <vfprintf+0x1e4>
 810:	f5 c0       	rjmp	.+490    	; 0x9fc <__stack+0xfd>
 812:	84 36       	cpi	r24, 0x64	; 100
 814:	11 f0       	breq	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	89 36       	cpi	r24, 0x69	; 105
 818:	71 f5       	brne	.+92     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 81a:	f7 01       	movw	r30, r14
 81c:	17 ff       	sbrs	r17, 7
 81e:	08 c0       	rjmp	.+16     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 820:	60 81       	ld	r22, Z
 822:	71 81       	ldd	r23, Z+1	; 0x01
 824:	82 81       	ldd	r24, Z+2	; 0x02
 826:	93 81       	ldd	r25, Z+3	; 0x03
 828:	97 01       	movw	r18, r14
 82a:	2c 5f       	subi	r18, 0xFC	; 252
 82c:	3f 4f       	sbci	r19, 0xFF	; 255
 82e:	09 c0       	rjmp	.+18     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 830:	60 81       	ld	r22, Z
 832:	71 81       	ldd	r23, Z+1	; 0x01
 834:	07 2e       	mov	r0, r23
 836:	00 0c       	add	r0, r0
 838:	88 0b       	sbc	r24, r24
 83a:	99 0b       	sbc	r25, r25
 83c:	97 01       	movw	r18, r14
 83e:	2e 5f       	subi	r18, 0xFE	; 254
 840:	3f 4f       	sbci	r19, 0xFF	; 255
 842:	79 01       	movw	r14, r18
 844:	1f 76       	andi	r17, 0x6F	; 111
 846:	31 2e       	mov	r3, r17
 848:	97 ff       	sbrs	r25, 7
 84a:	0a c0       	rjmp	.+20     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 84c:	90 95       	com	r25
 84e:	80 95       	com	r24
 850:	70 95       	com	r23
 852:	61 95       	neg	r22
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	31 2f       	mov	r19, r17
 85c:	30 68       	ori	r19, 0x80	; 128
 85e:	33 2e       	mov	r3, r19
 860:	2a e0       	ldi	r18, 0x0A	; 10
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	ae 01       	movw	r20, r28
 866:	4f 5f       	subi	r20, 0xFF	; 255
 868:	5f 4f       	sbci	r21, 0xFF	; 255
 86a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__ultoa_invert>
 86e:	48 2e       	mov	r4, r24
 870:	4c 85       	ldd	r20, Y+12	; 0x0c
 872:	44 1a       	sub	r4, r20
 874:	4a c0       	rjmp	.+148    	; 0x90a <__stack+0xb>
 876:	85 37       	cpi	r24, 0x75	; 117
 878:	29 f4       	brne	.+10     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 87a:	1f 7e       	andi	r17, 0xEF	; 239
 87c:	a1 2e       	mov	r10, r17
 87e:	2a e0       	ldi	r18, 0x0A	; 10
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	25 c0       	rjmp	.+74     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 884:	51 2f       	mov	r21, r17
 886:	59 7f       	andi	r21, 0xF9	; 249
 888:	a5 2e       	mov	r10, r21
 88a:	8f 36       	cpi	r24, 0x6F	; 111
 88c:	c1 f0       	breq	.+48     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 88e:	18 f4       	brcc	.+6      	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 890:	88 35       	cpi	r24, 0x58	; 88
 892:	79 f0       	breq	.+30     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 894:	bd c0       	rjmp	.+378    	; 0xa10 <__stack+0x111>
 896:	80 37       	cpi	r24, 0x70	; 112
 898:	19 f0       	breq	.+6      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 89a:	88 37       	cpi	r24, 0x78	; 120
 89c:	21 f0       	breq	.+8      	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 89e:	b8 c0       	rjmp	.+368    	; 0xa10 <__stack+0x111>
 8a0:	85 2f       	mov	r24, r21
 8a2:	80 61       	ori	r24, 0x10	; 16
 8a4:	a8 2e       	mov	r10, r24
 8a6:	a4 fe       	sbrs	r10, 4
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8aa:	9a 2d       	mov	r25, r10
 8ac:	94 60       	ori	r25, 0x04	; 4
 8ae:	a9 2e       	mov	r10, r25
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8b2:	14 ff       	sbrs	r17, 4
 8b4:	0a c0       	rjmp	.+20     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8b6:	a5 2f       	mov	r26, r21
 8b8:	a6 60       	ori	r26, 0x06	; 6
 8ba:	aa 2e       	mov	r10, r26
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8be:	28 e0       	ldi	r18, 0x08	; 8
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8c4:	20 e1       	ldi	r18, 0x10	; 16
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8ca:	20 e1       	ldi	r18, 0x10	; 16
 8cc:	32 e0       	ldi	r19, 0x02	; 2
 8ce:	f7 01       	movw	r30, r14
 8d0:	a7 fe       	sbrs	r10, 7
 8d2:	08 c0       	rjmp	.+16     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8d4:	60 81       	ld	r22, Z
 8d6:	71 81       	ldd	r23, Z+1	; 0x01
 8d8:	82 81       	ldd	r24, Z+2	; 0x02
 8da:	93 81       	ldd	r25, Z+3	; 0x03
 8dc:	a7 01       	movw	r20, r14
 8de:	4c 5f       	subi	r20, 0xFC	; 252
 8e0:	5f 4f       	sbci	r21, 0xFF	; 255
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
 8e4:	60 81       	ld	r22, Z
 8e6:	71 81       	ldd	r23, Z+1	; 0x01
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	a7 01       	movw	r20, r14
 8ee:	4e 5f       	subi	r20, 0xFE	; 254
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	7a 01       	movw	r14, r20
 8f4:	ae 01       	movw	r20, r28
 8f6:	4f 5f       	subi	r20, 0xFF	; 255
 8f8:	5f 4f       	sbci	r21, 0xFF	; 255
 8fa:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__ultoa_invert>
 8fe:	48 2e       	mov	r4, r24
 900:	5c 85       	ldd	r21, Y+12	; 0x0c
 902:	45 1a       	sub	r4, r21
 904:	8a 2d       	mov	r24, r10
 906:	8f 77       	andi	r24, 0x7F	; 127
 908:	38 2e       	mov	r3, r24
 90a:	36 fe       	sbrs	r3, 6
 90c:	0d c0       	rjmp	.+26     	; 0x928 <__stack+0x29>
 90e:	93 2d       	mov	r25, r3
 910:	9e 7f       	andi	r25, 0xFE	; 254
 912:	a9 2e       	mov	r10, r25
 914:	4b 14       	cp	r4, r11
 916:	58 f4       	brcc	.+22     	; 0x92e <__stack+0x2f>
 918:	34 fe       	sbrs	r3, 4
 91a:	0b c0       	rjmp	.+22     	; 0x932 <__stack+0x33>
 91c:	32 fc       	sbrc	r3, 2
 91e:	09 c0       	rjmp	.+18     	; 0x932 <__stack+0x33>
 920:	a3 2d       	mov	r26, r3
 922:	ae 7e       	andi	r26, 0xEE	; 238
 924:	aa 2e       	mov	r10, r26
 926:	05 c0       	rjmp	.+10     	; 0x932 <__stack+0x33>
 928:	14 2d       	mov	r17, r4
 92a:	a3 2c       	mov	r10, r3
 92c:	03 c0       	rjmp	.+6      	; 0x934 <__stack+0x35>
 92e:	14 2d       	mov	r17, r4
 930:	01 c0       	rjmp	.+2      	; 0x934 <__stack+0x35>
 932:	1b 2d       	mov	r17, r11
 934:	a4 fe       	sbrs	r10, 4
 936:	0e c0       	rjmp	.+28     	; 0x954 <__stack+0x55>
 938:	fe 01       	movw	r30, r28
 93a:	e4 0d       	add	r30, r4
 93c:	f1 1d       	adc	r31, r1
 93e:	80 81       	ld	r24, Z
 940:	80 33       	cpi	r24, 0x30	; 48
 942:	21 f4       	brne	.+8      	; 0x94c <__stack+0x4d>
 944:	ea 2d       	mov	r30, r10
 946:	e9 7e       	andi	r30, 0xE9	; 233
 948:	ae 2e       	mov	r10, r30
 94a:	08 c0       	rjmp	.+16     	; 0x95c <__stack+0x5d>
 94c:	a2 fe       	sbrs	r10, 2
 94e:	05 c0       	rjmp	.+10     	; 0x95a <__stack+0x5b>
 950:	1e 5f       	subi	r17, 0xFE	; 254
 952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0x5d>
 954:	8a 2d       	mov	r24, r10
 956:	86 78       	andi	r24, 0x86	; 134
 958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
 95a:	1f 5f       	subi	r17, 0xFF	; 255
 95c:	a3 fc       	sbrc	r10, 3
 95e:	11 c0       	rjmp	.+34     	; 0x982 <__stack+0x83>
 960:	a0 fe       	sbrs	r10, 0
 962:	06 c0       	rjmp	.+12     	; 0x970 <__stack+0x71>
 964:	10 17       	cp	r17, r16
 966:	88 f4       	brcc	.+34     	; 0x98a <__stack+0x8b>
 968:	04 0d       	add	r16, r4
 96a:	b0 2e       	mov	r11, r16
 96c:	b1 1a       	sub	r11, r17
 96e:	0e c0       	rjmp	.+28     	; 0x98c <__stack+0x8d>
 970:	10 17       	cp	r17, r16
 972:	60 f4       	brcc	.+24     	; 0x98c <__stack+0x8d>
 974:	b6 01       	movw	r22, r12
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 97e:	1f 5f       	subi	r17, 0xFF	; 255
 980:	f7 cf       	rjmp	.-18     	; 0x970 <__stack+0x71>
 982:	10 17       	cp	r17, r16
 984:	18 f4       	brcc	.+6      	; 0x98c <__stack+0x8d>
 986:	01 1b       	sub	r16, r17
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
 98a:	b4 2c       	mov	r11, r4
 98c:	00 e0       	ldi	r16, 0x00	; 0
 98e:	a4 fe       	sbrs	r10, 4
 990:	10 c0       	rjmp	.+32     	; 0x9b2 <__stack+0xb3>
 992:	b6 01       	movw	r22, r12
 994:	80 e3       	ldi	r24, 0x30	; 48
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 99c:	a2 fe       	sbrs	r10, 2
 99e:	17 c0       	rjmp	.+46     	; 0x9ce <__stack+0xcf>
 9a0:	a1 fc       	sbrc	r10, 1
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <__stack+0xab>
 9a4:	88 e7       	ldi	r24, 0x78	; 120
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0xaf>
 9aa:	88 e5       	ldi	r24, 0x58	; 88
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	b6 01       	movw	r22, r12
 9b0:	0c c0       	rjmp	.+24     	; 0x9ca <__stack+0xcb>
 9b2:	8a 2d       	mov	r24, r10
 9b4:	86 78       	andi	r24, 0x86	; 134
 9b6:	59 f0       	breq	.+22     	; 0x9ce <__stack+0xcf>
 9b8:	a1 fe       	sbrs	r10, 1
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	8b e2       	ldi	r24, 0x2B	; 43
 9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__stack+0xc3>
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	a7 fc       	sbrc	r10, 7
 9c4:	8d e2       	ldi	r24, 0x2D	; 45
 9c6:	b6 01       	movw	r22, r12
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 9ce:	4b 14       	cp	r4, r11
 9d0:	38 f4       	brcc	.+14     	; 0x9e0 <__stack+0xe1>
 9d2:	b6 01       	movw	r22, r12
 9d4:	80 e3       	ldi	r24, 0x30	; 48
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 9dc:	ba 94       	dec	r11
 9de:	f7 cf       	rjmp	.-18     	; 0x9ce <__stack+0xcf>
 9e0:	4a 94       	dec	r4
 9e2:	e1 e0       	ldi	r30, 0x01	; 1
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	ec 0f       	add	r30, r28
 9e8:	fd 1f       	adc	r31, r29
 9ea:	e4 0d       	add	r30, r4
 9ec:	f1 1d       	adc	r31, r1
 9ee:	80 81       	ld	r24, Z
 9f0:	b6 01       	movw	r22, r12
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 9f8:	41 10       	cpse	r4, r1
 9fa:	f2 cf       	rjmp	.-28     	; 0x9e0 <__stack+0xe1>
 9fc:	00 23       	and	r16, r16
 9fe:	09 f4       	brne	.+2      	; 0xa02 <__stack+0x103>
 a00:	30 ce       	rjmp	.-928    	; 0x662 <vfprintf+0x5e>
 a02:	b6 01       	movw	r22, r12
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 cd 0b 	call	0x179a	; 0x179a <fputc>
 a0c:	01 50       	subi	r16, 0x01	; 1
 a0e:	f6 cf       	rjmp	.-20     	; 0x9fc <__stack+0xfd>
 a10:	f6 01       	movw	r30, r12
 a12:	87 81       	ldd	r24, Z+7	; 0x07
 a14:	90 85       	ldd	r25, Z+8	; 0x08
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <__stack+0x11d>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	62 96       	adiw	r28, 0x12	; 18
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	f8 94       	cli
 a22:	de bf       	out	0x3e, r29	; 62
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	cd bf       	out	0x3d, r28	; 61
 a28:	df 91       	pop	r29
 a2a:	cf 91       	pop	r28
 a2c:	1f 91       	pop	r17
 a2e:	0f 91       	pop	r16
 a30:	ff 90       	pop	r15
 a32:	ef 90       	pop	r14
 a34:	df 90       	pop	r13
 a36:	cf 90       	pop	r12
 a38:	bf 90       	pop	r11
 a3a:	af 90       	pop	r10
 a3c:	9f 90       	pop	r9
 a3e:	8f 90       	pop	r8
 a40:	7f 90       	pop	r7
 a42:	6f 90       	pop	r6
 a44:	4f 90       	pop	r4
 a46:	3f 90       	pop	r3
 a48:	2f 90       	pop	r2
 a4a:	08 95       	ret

Disassembly of section .text.avrlibc:

000019b6 <strnlen>:
    19b6:	cf 92       	push	r12
    19b8:	df 92       	push	r13
    19ba:	ef 92       	push	r14
    19bc:	6b 01       	movw	r12, r22
    19be:	e8 2e       	mov	r14, r24
    19c0:	a8 2f       	mov	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	41 15       	cp	r20, r1
    19c6:	51 05       	cpc	r21, r1
    19c8:	31 f4       	brne	.+12     	; 0x19d6 <strnlen+0x20>
    19ca:	8c 19       	sub	r24, r12
    19cc:	9d 09       	sbc	r25, r13
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	08 95       	ret
    19d6:	fc 01       	movw	r30, r24
    19d8:	24 91       	lpm	r18, Z
    19da:	a7 fd       	sbrc	r26, 7
    19dc:	20 81       	ld	r18, Z
    19de:	22 23       	and	r18, r18
    19e0:	a1 f3       	breq	.-24     	; 0x19ca <strnlen+0x14>
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	a1 1d       	adc	r26, r1
    19e6:	41 50       	subi	r20, 0x01	; 1
    19e8:	51 09       	sbc	r21, r1
    19ea:	ec cf       	rjmp	.-40     	; 0x19c4 <strnlen+0xe>

Disassembly of section .text.avrlibc:

0000179a <fputc>:
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	fb 01       	movw	r30, r22
    17a4:	24 81       	ldd	r18, Z+4	; 0x04
    17a6:	21 fd       	sbrc	r18, 1
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <fputc+0x16>
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	2c c0       	rjmp	.+88     	; 0x1808 <fputc+0x6e>
    17b0:	22 ff       	sbrs	r18, 2
    17b2:	16 c0       	rjmp	.+44     	; 0x17e0 <fputc+0x46>
    17b4:	47 81       	ldd	r20, Z+7	; 0x07
    17b6:	50 85       	ldd	r21, Z+8	; 0x08
    17b8:	25 81       	ldd	r18, Z+5	; 0x05
    17ba:	36 81       	ldd	r19, Z+6	; 0x06
    17bc:	42 17       	cp	r20, r18
    17be:	53 07       	cpc	r21, r19
    17c0:	44 f4       	brge	.+16     	; 0x17d2 <fputc+0x38>
    17c2:	a0 81       	ld	r26, Z
    17c4:	b1 81       	ldd	r27, Z+1	; 0x01
    17c6:	9d 01       	movw	r18, r26
    17c8:	2f 5f       	subi	r18, 0xFF	; 255
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	31 83       	std	Z+1, r19	; 0x01
    17ce:	20 83       	st	Z, r18
    17d0:	8c 93       	st	X, r24
    17d2:	27 81       	ldd	r18, Z+7	; 0x07
    17d4:	30 85       	ldd	r19, Z+8	; 0x08
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	30 87       	std	Z+8, r19	; 0x08
    17dc:	27 83       	std	Z+7, r18	; 0x07
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <fputc+0x6e>
    17e0:	8b 01       	movw	r16, r22
    17e2:	ec 01       	movw	r28, r24
    17e4:	fb 01       	movw	r30, r22
    17e6:	01 84       	ldd	r0, Z+9	; 0x09
    17e8:	f2 85       	ldd	r31, Z+10	; 0x0a
    17ea:	e0 2d       	mov	r30, r0
    17ec:	09 95       	icall
    17ee:	89 2b       	or	r24, r25
    17f0:	e1 f6       	brne	.-72     	; 0x17aa <fputc+0x10>
    17f2:	d8 01       	movw	r26, r16
    17f4:	17 96       	adiw	r26, 0x07	; 7
    17f6:	8d 91       	ld	r24, X+
    17f8:	9c 91       	ld	r25, X
    17fa:	18 97       	sbiw	r26, 0x08	; 8
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	18 96       	adiw	r26, 0x08	; 8
    1800:	9c 93       	st	X, r25
    1802:	8e 93       	st	-X, r24
    1804:	17 97       	sbiw	r26, 0x07	; 7
    1806:	ce 01       	movw	r24, r28
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

Disassembly of section .text.avrlibc:

00001516 <__ultoa_invert>:
    1516:	fa 01       	movw	r30, r20
    1518:	aa 27       	eor	r26, r26
    151a:	28 30       	cpi	r18, 0x08	; 8
    151c:	51 f1       	breq	.+84     	; 0x1572 <__ultoa_invert+0x5c>
    151e:	20 31       	cpi	r18, 0x10	; 16
    1520:	81 f1       	breq	.+96     	; 0x1582 <__ultoa_invert+0x6c>
    1522:	e8 94       	clt
    1524:	6f 93       	push	r22
    1526:	6e 7f       	andi	r22, 0xFE	; 254
    1528:	6e 5f       	subi	r22, 0xFE	; 254
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	8f 4f       	sbci	r24, 0xFF	; 255
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	af 4f       	sbci	r26, 0xFF	; 255
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	3e d0       	rcall	.+124    	; 0x15b2 <__ultoa_invert+0x9c>
    1536:	b4 e0       	ldi	r27, 0x04	; 4
    1538:	3c d0       	rcall	.+120    	; 0x15b2 <__ultoa_invert+0x9c>
    153a:	67 0f       	add	r22, r23
    153c:	78 1f       	adc	r23, r24
    153e:	89 1f       	adc	r24, r25
    1540:	9a 1f       	adc	r25, r26
    1542:	a1 1d       	adc	r26, r1
    1544:	68 0f       	add	r22, r24
    1546:	79 1f       	adc	r23, r25
    1548:	8a 1f       	adc	r24, r26
    154a:	91 1d       	adc	r25, r1
    154c:	a1 1d       	adc	r26, r1
    154e:	6a 0f       	add	r22, r26
    1550:	71 1d       	adc	r23, r1
    1552:	81 1d       	adc	r24, r1
    1554:	91 1d       	adc	r25, r1
    1556:	a1 1d       	adc	r26, r1
    1558:	20 d0       	rcall	.+64     	; 0x159a <__ultoa_invert+0x84>
    155a:	09 f4       	brne	.+2      	; 0x155e <__ultoa_invert+0x48>
    155c:	68 94       	set
    155e:	3f 91       	pop	r19
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	26 9f       	mul	r18, r22
    1564:	11 24       	eor	r1, r1
    1566:	30 19       	sub	r19, r0
    1568:	30 5d       	subi	r19, 0xD0	; 208
    156a:	31 93       	st	Z+, r19
    156c:	de f6       	brtc	.-74     	; 0x1524 <__ultoa_invert+0xe>
    156e:	cf 01       	movw	r24, r30
    1570:	08 95       	ret
    1572:	46 2f       	mov	r20, r22
    1574:	47 70       	andi	r20, 0x07	; 7
    1576:	40 5d       	subi	r20, 0xD0	; 208
    1578:	41 93       	st	Z+, r20
    157a:	b3 e0       	ldi	r27, 0x03	; 3
    157c:	0f d0       	rcall	.+30     	; 0x159c <__ultoa_invert+0x86>
    157e:	c9 f7       	brne	.-14     	; 0x1572 <__ultoa_invert+0x5c>
    1580:	f6 cf       	rjmp	.-20     	; 0x156e <__ultoa_invert+0x58>
    1582:	46 2f       	mov	r20, r22
    1584:	4f 70       	andi	r20, 0x0F	; 15
    1586:	40 5d       	subi	r20, 0xD0	; 208
    1588:	4a 33       	cpi	r20, 0x3A	; 58
    158a:	18 f0       	brcs	.+6      	; 0x1592 <__ultoa_invert+0x7c>
    158c:	49 5d       	subi	r20, 0xD9	; 217
    158e:	31 fd       	sbrc	r19, 1
    1590:	40 52       	subi	r20, 0x20	; 32
    1592:	41 93       	st	Z+, r20
    1594:	02 d0       	rcall	.+4      	; 0x159a <__ultoa_invert+0x84>
    1596:	a9 f7       	brne	.-22     	; 0x1582 <__ultoa_invert+0x6c>
    1598:	ea cf       	rjmp	.-44     	; 0x156e <__ultoa_invert+0x58>
    159a:	b4 e0       	ldi	r27, 0x04	; 4
    159c:	a6 95       	lsr	r26
    159e:	97 95       	ror	r25
    15a0:	87 95       	ror	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	ba 95       	dec	r27
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__ultoa_invert+0x86>
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 05       	cpc	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	08 95       	ret
    15b2:	9b 01       	movw	r18, r22
    15b4:	ac 01       	movw	r20, r24
    15b6:	0a 2e       	mov	r0, r26
    15b8:	06 94       	lsr	r0
    15ba:	57 95       	ror	r21
    15bc:	47 95       	ror	r20
    15be:	37 95       	ror	r19
    15c0:	27 95       	ror	r18
    15c2:	ba 95       	dec	r27
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__ultoa_invert+0xa2>
    15c6:	62 0f       	add	r22, r18
    15c8:	73 1f       	adc	r23, r19
    15ca:	84 1f       	adc	r24, r20
    15cc:	95 1f       	adc	r25, r21
    15ce:	a0 1d       	adc	r26, r0
    15d0:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

0000197e <__prologue_saves__>:
    197e:	2f 92       	push	r2
    1980:	3f 92       	push	r3
    1982:	4f 92       	push	r4
    1984:	5f 92       	push	r5
    1986:	6f 92       	push	r6
    1988:	7f 92       	push	r7
    198a:	8f 92       	push	r8
    198c:	9f 92       	push	r9
    198e:	af 92       	push	r10
    1990:	bf 92       	push	r11
    1992:	cf 92       	push	r12
    1994:	df 92       	push	r13
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	ca 1b       	sub	r28, r26
    19a8:	db 0b       	sbc	r29, r27
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000019ec <__epilogue_restores__>:
    19ec:	2a 88       	ldd	r2, Y+18	; 0x12
    19ee:	39 88       	ldd	r3, Y+17	; 0x11
    19f0:	48 88       	ldd	r4, Y+16	; 0x10
    19f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    19f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    19f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    19f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    19fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    19fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    19fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1a00:	c8 84       	ldd	r12, Y+8	; 0x08
    1a02:	df 80       	ldd	r13, Y+7	; 0x07
    1a04:	ee 80       	ldd	r14, Y+6	; 0x06
    1a06:	fd 80       	ldd	r15, Y+5	; 0x05
    1a08:	0c 81       	ldd	r16, Y+4	; 0x04
    1a0a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a0c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a10:	ce 0f       	add	r28, r30
    1a12:	d1 1d       	adc	r29, r1
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	ed 01       	movw	r28, r26
    1a20:	08 95       	ret
